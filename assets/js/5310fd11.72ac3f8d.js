"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[77648],{41830:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>l});var n=r(37058),a=r(74848),i=r(28453);const o={title:"Whitelisting your Public IP with Azure Bicep and PowerShell",authors:["Luke"],tags:["Azure"],date:"2021-12-14 00:00:00 +1300",toc:!1,header:{teaser:"images/powershell-blog-feature-banner.png"},slug:"azure/whitelisting-your-public-ip-with-azure-bicep"},s=void 0,c={authorsImageUrls:[void 0]},l=[];function u(e){const t={a:"a",code:"code",em:"em",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["Allowing and restricting Azure resources by being accessible by specific Public IP ",(0,a.jsx)(t.em,{children:"(Internet Protocol)"})," addresses has been around for years; most Azure resources support it, a Storage account is no different."]}),"\n",(0,a.jsx)(t.p,{children:"In this article, I will be using PowerShell to obtain my current public IP, then parse that variable into my Azure Bicep deployment to create a storage account, with the firewall rule allowing ONLY my public IP address."}),"\n",(0,a.jsxs)(t.p,{children:["I will assume that you have both ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/install?WT.mc_id=AZ-MVP-5004796#windows",title:"Azure Bicep - Install",children:"Azure Bicep"})," and ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/powershell/azure/install-az-ps?WT.mc_id=AZ-MVP-5004796",title:"PowerShell - Azure",children:"PowerShell Azure"})," modules installed and the know-how to connect to Microsoft Azure."]}),"\n",(0,a.jsx)(t.p,{children:"Utilising PowerShell to create dynamic variables in your deployment can open the doors to more flexible deployments, such as including the name of the person deploying the infrastructure into the tags of the resource - or in this case, adding a whitelisted IP automatically to your Azure resource to be secure by default."}),"\n",(0,a.jsxs)(t.p,{children:["I will be using PowerShell ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_splatting?view=powershell-7.2&WT.mc_id=AZ-MVP-5004796",title:"Splatting",children:"splatting"})," as it's easier to edit and display. You can easily take the scripts here to make them your own."]}),"\n",(0,a.jsxs)(t.p,{children:["Azure Bicep deployments ",(0,a.jsx)(t.em,{children:"(like ARM)"})," have the following command: 'TemplateParameterObject'. 'TemplateParameterObject' allows Azure Bicep to accept parameters from PowerShell directly, which can be pretty powerful when used with a self-service portal or pipeline."]}),"\n",(0,a.jsx)(t.p,{children:"Now we are ready to create the Azure Storage account..."}),"\n",(0,a.jsx)(t.p,{children:"I will first make an Azure Resource Group using PowerShell for my storage account first, then use the New-AzResourceGroupDeployment cmdlet to deploy my storage account from my bicep file."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"#Connects to Azure\nConnect-AzAccount\n#Grabs the Public IP of the currently connected PC and adds it into a variable.\n$publicip = (Invoke-WebRequest -uri \"http://ifconfig.me/ip\").Content\n#Resource Group Name\n$resourcegrpname = 'storage_rg'\n#Creates a resource group for the storage account\nNew-AzResourceGroup -Name $resourcegrpname -Location \"AustraliaEast\"\n# Parameters splat, for Azure Bicep\n# Parameter options for the Azure Bicep Template, this is where your Azure Bicep parameters go\n$paramObject = @{\n  'storageaccprefix' = 'stg'\n  'whitelistpublicip'  = $publicip\n}\n# Parameters for the New-AzResourceGroupDeployment cmdlet goes into.\n$parameters = @{\n  'Name'                  = 'StorageAccountDeployBase'\n  'ResourceGroupName'     = $resourcegrpname \n  'TemplateFile'          = 'c:\\temp\\storageaccount.bicep'\n  'TemplateParameterObject'    = $paramObject\n  'Verbose'               = $true\n}\n#Deploys the Azure Bicep template\nNew-AzResourceGroupDeployment @parameters\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Azure Bicep - Parameter",src:r(89603).A+"",title:"Azure Bicep - Parameter",width:"701",height:"116"})}),"\n",(0,a.jsxs)(t.p,{children:["As you can see above, I am grabbing my current IP Address from the ifconfig website and storing it in a variable ",(0,a.jsx)(t.em,{children:"(as a string object)"}),", then referencing it in the paramObject - which will be passed through to the TemplateParameterObject command as Parameters strings for Azure Bicep, my IP address ",(0,a.jsx)(t.em,{children:"(I am running this from an Azure VM)"})," is then passed through, to Azure Bicep."]}),"\n",(0,a.jsx)(t.p,{children:"My Azure Bicep is below:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"param storageaccprefix string = ''\nparam whitelistpublicip string = ''\nvar location = resourceGroup().location\n\nresource storageaccount 'Microsoft.Storage/storageAccounts@2021-06-01' = {\n  name: '${storageaccprefix}${uniqueString(resourceGroup().id)}'\n  location: location\n  sku: {\n    name: 'Standard_ZRS'\n  }\n  kind: 'StorageV2'\n  properties: {\n    defaultToOAuthAuthentication: false\n    allowCrossTenantReplication: false\n    minimumTlsVersion: 'TLS1_2'\n    allowBlobPublicAccess: true\n    allowSharedKeyAccess: true\n    isHnsEnabled: true\n    networkAcls: {\n      resourceAccessRules: []\n      bypass: 'AzureServices'\n      virtualNetworkRules: []\n      ipRules: [\n        {\n          value: whitelistpublicip\n          action: 'Allow'\n        }\n      ]\n      defaultAction: 'Deny'\n    }\n    supportsHttpsTrafficOnly: true\n    encryption: {\n      services: {\n  \n        blob: {\n          keyType: 'Account'\n          enabled: true\n        }\n      }\n      keySource: 'Microsoft.Storage'\n    }\n    accessTier: 'Hot'\n  }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"In Azure Bicep - I am accepting the whitelistpublicip variable from PowerShell and have passed that along to the virtualNetworkRules object as an Allow, while the defaultAction is 'Deny'."}),"\n",(0,a.jsx)(t.p,{children:"If I navigate to the Azure Portal, I can see my newly created storage account; under the Networking blade, I can see that the Firewall has been enabled and my Public IP has been added successfully:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Azure Storage Account - Network",src:r(70819).A+"",title:"Azure Storage Account - Network",width:"1393",height:"814"})}),"\n",(0,a.jsx)(t.p,{children:"Hopefully, this helps you be more secure from deployment time and gives you a good framework to work on; in the future, the same process can be used to create inbound RDP rules for Virtual Machines, as an example."})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},70819:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/storageaccount_firewall-3a9461749910bcda38f07bde8bd12491.png"},89603:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/storageaccount_publicip-ea94c709d4a3083fc4a33d3ba0a092d0.png"},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>s});var n=r(96540);const a={},i=n.createContext(a);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(i.Provider,{value:t},e.children)}},37058:e=>{e.exports=JSON.parse('{"permalink":"/azure/whitelisting-your-public-ip-with-azure-bicep","source":"@site/blog/2021-12-14-whitelisting-your-public-ip-with-azure-bicep.md","title":"Whitelisting your Public IP with Azure Bicep and PowerShell","description":"Allowing and restricting Azure resources by being accessible by specific Public IP (Internet Protocol) addresses has been around for years; most Azure resources support it, a Storage account is no different.","date":"2021-12-14T00:00:00.000Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":3.18,"hasTruncateMarker":false,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Whitelisting your Public IP with Azure Bicep and PowerShell","authors":["Luke"],"tags":["Azure"],"date":"2021-12-14 00:00:00 +1300","toc":false,"header":{"teaser":"images/powershell-blog-feature-banner.png"},"slug":"azure/whitelisting-your-public-ip-with-azure-bicep"},"unlisted":false,"prevItem":{"title":"SFTP in Microsoft Azure using Azure Blob Storage","permalink":"/azure/sftp-in-microsoft-azure-using-azure-blob-storage"},"nextItem":{"title":"Capturing Virtual Machine images and Snapshots in Azure using WVDAdmin","permalink":"/azure/capturing-virtual-machine-images-and-snapshots-in-azure-using-wvdadmin"}}')}}]);