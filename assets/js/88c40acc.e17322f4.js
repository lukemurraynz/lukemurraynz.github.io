"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[30529],{75662:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});var n=i(59992),a=i(74848),s=i(28453);const o={title:"Spec-Driven Azure Platform Landing Zone with Bicep",metaDescription:"Learn how to use GitHub Spec Kit and Bicep to build an Azure Platform Landing Zone aligned with Cloud Adoption Framework best practices.",tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"azure/spec-driven-platform-landing-zone-bicep",keywords:["Azure","Platform Landing Zone","Bicep","Infrastructure as Code","Spec-Driven Development","GitHub Spec Kit","Cloud Adoption Framework","Azure DevOps","Hub and Spoke","Azure Firewall"],description:"Learn how to use GitHub Spec Kit and Bicep to build an Azure Platform Landing Zone aligned with Cloud Adoption Framework best practices.",date:new Date("2025-10-05T23:07:36.561Z")},r=void 0,c={authorsImageUrls:[void 0]},l=[{value:"\ud83d\ude80 Getting Started with Spec Kit",id:"-getting-started-with-spec-kit",level:2},{value:"\ud83d\udee0\ufe0f Spec Kit Commands Overview",id:"\ufe0f-spec-kit-commands-overview",level:3},{value:"\ud83c\udfd7\ufe0f Project Initialization",id:"\ufe0f-project-initialization",level:2},{value:"\ud83d\udcdc Creating the Project Constitution",id:"-creating-the-project-constitution",level:2},{value:"\ud83d\udccb Defining the Specification",id:"-defining-the-specification",level:2},{value:"\ud83d\udd0d Clarifying Requirements",id:"-clarifying-requirements",level:2},{value:"\ud83c\udfaf Technical Planning",id:"-technical-planning",level:2},{value:"\u2705 Breaking Down Into Tasks",id:"-breaking-down-into-tasks",level:2},{value:"\ud83d\udd2c Analyzing for Consistency",id:"-analyzing-for-consistency",level:2},{value:"\ud83d\udcbb Implementation Phase",id:"-implementation-phase",level:2},{value:"\ud83d\udcc1 Examining the Generated Bicep Code",id:"-examining-the-generated-bicep-code",level:2},{value:"\ud83c\udf93 Lessons Learned and Improvements",id:"-lessons-learned-and-improvements",level:2},{value:"\ud83c\udfaf Conclusion",id:"-conclusion",level:2}];function d(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["Today, we are going to look at some of the practicalities of Spec Kit and use Spec-Driven Development to create a ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/azure/cloud-adoption-framework/ready/?WT.mc_id=AZ-MVP-5004796#platform-landing-zone",children:"Platform Landing Zone"})," aligned to the ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/azure/cloud-adoption-framework/overview?WT.mc_id=AZ-MVP-5004796",children:"Microsoft Cloud Adoption Framework"}),", using ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/azure/azure-resource-manager/bicep/overview?tabs=bicep&WT.mc_id=AZ-MVP-5004796",children:"Bicep"})," as the Infrastructure as Code."]}),"\n","\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://github.com/github/spec-kit",children:"GitHub Spec Kit"})," brings a new approach to AI-based software development workflows \u2013 instead of vibe coding every new feature and bug fix, teams can preemptively outline the concrete project requirements, motivations, and technical aspects before handing that off to AI agents and have them build exactly what was needed in the first place. If you\u2019ve ever worked with product managers who had to put together Product Requirements Documents (PRDs) that need to be reviewed and then implemented, you might hear some echoes of a familiar process."]}),(0,a.jsx)(t.p,{children:"Spec-Driven Development, or SDD, is not about writing exhaustive, dry requirements documents that nobody reads. It\u2019s also not about waterfall planning or trying to predict the future through extensive planning exercises. And it\u2019s definitely not about creating more bureaucracy that slows down engineering teams."}),(0,a.jsx)(t.p,{children:'SDD is about making your technical decisions explicit, reviewable, and evolvable. Think of it as version control for your thinking. Instead of having crucial architectural decisions trapped in email threads, scattered documents, or locked in someone\u2019s head, you capture the "why" behind your technical choices in a format that can grow with your project and your understanding of the problem space.'}),(0,a.jsx)(t.p,{children:"Spec-Driven Development (SDD) is a software development approach in which detailed, structured specifications are created first and serve as the single source of truth to guide the entire development process\u2014from planning and design to implementation and testing. This method replaces ambiguity and disparate requirements with precise, executable specifications, which can now be utilized by AI agents to automatically generate working code, tests, and documentation, resulting in greater precision and efficiency."}),(0,a.jsxs)(t.p,{children:["You can read more about Spec Kit and Spec-Driven Development ",(0,a.jsx)(t.a,{href:"https://github.com/github/spec-kit/blob/main/spec-driven.md",children:"here"}),"."]})]}),"\n",(0,a.jsx)(t.p,{children:"So let's get started."}),"\n",(0,a.jsx)(t.h2,{id:"-getting-started-with-spec-kit",children:"\ud83d\ude80 Getting Started with Spec Kit"}),"\n",(0,a.jsxs)(t.p,{children:["First, we need to install Spec Kit. I will be running this from a devcontainer, but you can install the ",(0,a.jsx)(t.a,{href:"https://github.com/github/spec-kit#1-install-specify",children:"Specify CLI"})," directly on your machine if you prefer, or copy the files from the latest set of Releases ",(0,a.jsx)(t.a,{href:"https://github.com/github/spec-kit/releases",children:"github/spec-kit"}),". The CLI is not required, but it does help you bootstrap, access the latest prompts, and verify that all necessary dependencies (i.e., you're using the proper IDE and git initialization) are in place."]}),"\n",(0,a.jsx)(t.p,{children:"Spec Kit is a collection of prompts and workflows that guide you through the Spec-Driven Development process. It utilizes AI to assist you in creating and managing specifications, plans, and tasks for your software projects."}),"\n",(0,a.jsx)(t.h3,{id:"\ufe0f-spec-kit-commands-overview",children:"\ud83d\udee0\ufe0f Spec Kit Commands Overview"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Command"}),(0,a.jsx)(t.th,{children:"Description"}),(0,a.jsx)(t.th,{children:"Why It's Needed"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"/constitution"})}),(0,a.jsx)(t.td,{children:"Create or update project governing principles and development guidelines"}),(0,a.jsx)(t.td,{children:'Establishes immutable architectural principles (9 articles) that ensure consistency, simplicity, and quality across all generated code. Acts as the "DNA" of your project, preventing over-engineering and maintaining architectural integrity.'})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"/specify"})}),(0,a.jsx)(t.td,{children:"Define what you want to build (requirements and user stories)"}),(0,a.jsx)(t.td,{children:"Transforms vague feature ideas into comprehensive, structured specifications with automatic repository management. Creates feature branches, proper directory structure, and complete PRDs with user stories and acceptance criteria - focusing on WHAT and WHY, not HOW."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"/clarify"})}),(0,a.jsx)(t.td,{children:"Clarify underspecified areas (must be run before /plan unless explicitly skipped)"}),(0,a.jsxs)(t.td,{children:["Identifies and resolves ambiguities marked with ",(0,a.jsx)(t.code,{children:"[NEEDS CLARIFICATION]"})," tags in specifications. Prevents AI from making incorrect assumptions and ensures all requirements are explicitly defined before technical planning begins."]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"/plan"})}),(0,a.jsx)(t.td,{children:"Create technical implementation plans with your chosen tech stack"}),(0,a.jsx)(t.td,{children:"Converts business requirements into detailed technical architecture and implementation details. Generates supporting documents (data models, API contracts, test scenarios) while ensuring constitutional compliance and architectural principles are followed."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"/tasks"})}),(0,a.jsx)(t.td,{children:"Generate actionable task lists for implementation"}),(0,a.jsx)(t.td,{children:"Analyzes the implementation plan and converts it into specific, executable tasks. Identifies parallel work streams and creates a structured roadmap that maps directly from specifications to concrete development actions."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"/analyze"})}),(0,a.jsx)(t.td,{children:"Cross-artifact consistency & coverage analysis (run after /tasks, before /implement)"}),(0,a.jsx)(t.td,{children:"Validates consistency across all specification artifacts, identifies gaps or contradictions, and ensures complete coverage of requirements before implementation begins. Acts as a quality gate to prevent specification drift."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"/implement"})}),(0,a.jsx)(t.td,{children:"Execute all tasks to build the feature according to the plan"}),(0,a.jsx)(t.td,{children:"Generates working code from the specifications and implementation plans. Follows test-first development (Article III), creates modular libraries (Article I), and ensures all code aligns with the established constitutional principles."})]})]})]}),"\n",(0,a.jsx)(t.p,{children:"We will go through the process of creating a new project, defining the constitution, specifying what we want to build, planning the technical implementation, generating tasks, analyzing for consistency, and finally implementing the code for a Platform Landing Zone."}),"\n",(0,a.jsx)(t.p,{children:'I love that specification development is front and centre, and that the process encourages you to think about the "why" and "what" before jumping into the "how". This is a great way to ensure that the result is actually what was needed, and not just what was easy to implement, so let\'s get started.'}),"\n",(0,a.jsx)(t.h2,{id:"\ufe0f-project-initialization",children:"\ud83c\udfd7\ufe0f Project Initialization"}),"\n",(0,a.jsx)(t.p,{children:"First, we will initialize our project and create our constitution. The model I will be using throughout this post is GPT-5, specifically for spec-driven development. When it comes to implementation, we will proceed with GPT-5-Codex."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"specify init .\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"SpecKit_BicepPLZ_Init",src:i(84945).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.h2,{id:"-creating-the-project-constitution",children:"\ud83d\udcdc Creating the Project Constitution"}),"\n",(0,a.jsx)(t.p,{children:"Now that we have initialized our project, we can create our constitution. The constitution is a set of guiding principles that will govern the development of our project. It is essential to get this right, as it will be used throughout the rest of the process to ensure that all generated code adheres to these principles."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-txt",children:"/constitution create governing principles and development guidelines, a constitution for a new project that will be an Azure Platform Landing Zone aligned to the [Microsoft Cloud Adoption Framework](https://learn.microsoft.com/azure/cloud-adoption-framework/ready/landing-zone/design-principles?WT.mc_id=AZ-MVP-5004796), using Bicep as the Infrastructure as Code language. The constitution should include principles for modularity, reusability, security, compliance, and best practices for Azure and Bicep development. The principles should be clear, concise, and actionable, providing a solid foundation for the project's architecture and implementation, while also acknowledging the complexity of Day 2 operations.\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"SpecKit_BicepPLZ_Constitution",src:i(27686).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.h2,{id:"-defining-the-specification",children:"\ud83d\udccb Defining the Specification"}),"\n",(0,a.jsx)(t.p,{children:"A constitution has been generated, covering the following principles, Modular & Composable, Reusability and Idempotent deployments, Security by design, Compliance and governance, Day 2 operations and observability, Resilience and Recovery, Cost Optimization and sustainability, version and change control, testing and validation shift left and documentation and discovery - some of the main principles, when looking at a Platform Landing Zone project. If needed, we can edit the constitution, but this looks good to me, so let's move on to specifying what we actually want to build."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-txt",children:"/specify build an Azure Platform Landing Zone that will be deployed with Azure Bicep and Azure DevOps pipelines. The Landing Zone will use an Azure Firewall, with Hub and Spoke networking _(/16 for the entire region)_ and will be deployed to the New Zealand North Azure region. Although not in the scope of the build, we need to make sure that the Platform Landing Zone will easily allow the addition of Application Landing Zones in the future.\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"SpecKit_BicepPLZ_Specify",src:i(21120).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.p,{children:"We can see that it ran a bash script to create a new branch and switch to it, allowing us to start making changes without affecting the master branch. A spec file has been created for 'our feature', which in this case is an Azure Platform Landing Zone. The spec file contains a high-level description of what we want to build, as well as user stories and acceptance criteria. We can edit the spec file if needed."}),"\n",(0,a.jsx)(t.p,{children:"Our Primary user story is:"}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"As a Cloud Platform (central) engineering team member, I need a standardized, governed, regionally-scoped Azure Platform Landing Zone with secure hub-and-spoke networking and central firewall controls so that future application teams can onboard rapidly, safely, and consistently without re\u2011implementing foundational services."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"With an acceptance scenario of:"}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Given"})," the platform team triggers the automated infrastructure deployment pipeline with an approved specification, ",(0,a.jsx)(t.strong,{children:"When"})," the pipeline completes, ",(0,a.jsx)(t.strong,{children:"Then"})," the foundational platform resources (management groups scope, hub VNet, spoke placeholder structure, firewall, policies, tagging baseline, address space reservation) are provisioned in the New Zealand North region successfully in a single execution."]}),"\n"]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:'It\'s worth noting that nothing has been actually created yet, ie, no Bicep etc - this is the benefit of the Spec-Driven Development approach, we are focusing on the "what" and "why" before the "how", and it helps us flesh out the actual requirements.'})}),"\n",(0,a.jsx)(t.p,{children:"It looks good enough to me, but there are areas that still need to be clarified, if we search for [NEEDS CLARIFICATION] we can see that there are a few areas that need to be clarified before we can move on to planning the technical implementation."}),"\n",(0,a.jsx)(t.h2,{id:"-clarifying-requirements",children:"\ud83d\udd0d Clarifying Requirements"}),"\n",(0,a.jsx)(t.p,{children:"This is great, as it ensures that we have a clear understanding of what we want to build before we start planning the technical implementation, and gaps we may have missed or need a decision on, a few highlighted areas in my example are:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"How many future applications should speak to Virtual Networks be considered in the future, to ensure no overlapping address spaces are used?"}),"\n",(0,a.jsx)(t.li,{children:"What are the logging and monitoring requirements and retention for the Azure Firewall?"}),"\n",(0,a.jsx)(t.li,{children:"What is the validation process for any Firewall policy changes?"}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["We can edit the spec.md file to add more details, or we can use the ",(0,a.jsx)(t.code,{children:"/clarify"})," command to have the AI help us clarify these areas before we proceed to the Plan stage, which is what we will do."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-txt",children:"/clarify\n"})}),"\n",(0,a.jsx)(t.p,{children:"The clarity process gives us a great multi-turn conversation, where we can answer the questions, and the AI will update the spec.md file with the answers. This is a great way to ensure that we have a clear understanding of what we want to build before we start planning the technical implementation, and in some cases, it may even highlight areas we hadn't thought of."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Spec Kit Clarify",src:i(62399).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.p,{children:"We can continue the clarification process and flesh out the details and potential edge cases, working on some of the low-impact or optional areas later. However, for this Platform Landing Zone, we have enough information to move on to the planning stage."}),"\n",(0,a.jsx)(t.h2,{id:"-technical-planning",children:"\ud83c\udfaf Technical Planning"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-txt",children:"/plan\n"})}),"\n",(0,a.jsx)(t.p,{children:"Plan now will read the constitution, and spec and check if there are any last decisions or clarification needed, and then it will create a technical implementation plan, data models, contracts, and test scenarios. The plan will be created in a new branch, and a PR will be created to merge the plan into the spec branch."}),"\n",(0,a.jsx)(t.p,{children:"There were some decisions still left, around the timeline of a potential second region, etc, but I proceeded with the Plan by just proceeding without clarification."}),"\n",(0,a.jsx)(t.p,{children:"We can see the plan.md file has been created, along with a data-models.md file, research.md file, containing the high-level technical approach based on the spec and constitution."}),"\n",(0,a.jsx)(t.p,{children:"The plan will also contain, assumptions, folder and file structure it will aim to create, a research.md file will be created, with additional research that was done to create the plan, and a data-models.md file will be created, with any data models that were created as part of the plan, ie, for resource diagnostics, should a Bicep module be created, with a diagnostic baseline for firewall, vnet logs over an alternative decision, such as Event Hub export, or the policies to include in the platform landing zone baseline. The data-model.md will contain entities or data related to the project, and any relationships between them, in our case it contains the entities fields around the Virtual Network address spaces."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Spec Kit Plan",src:i(40738).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"It's still worth noting that no Bicep has been created yet; we are still in the planning stage, and this is a great way to ensure that we have a clear understanding of what we want to build before we start implementing the technical solution. The next step is to generate the tasks, which will break down the plan into actionable tasks, which will then be implemented."})}),"\n",(0,a.jsx)(t.h2,{id:"-breaking-down-into-tasks",children:"\u2705 Breaking Down Into Tasks"}),"\n",(0,a.jsx)(t.p,{children:"The next stage is to create the tasks, which will break down the plan into actionable tasks."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Entities \u2192 model/module creation tasks"}),"\n",(0,a.jsx)(t.li,{children:"Schemas \u2192 contract validation & test tasks"}),"\n",(0,a.jsx)(t.li,{children:"Quickstart scenarios \u2192 integration test scaffolding"}),"\n",(0,a.jsx)(t.li,{children:"Constitution principles \u2192 quality gates (lint, what-if, policy eval scripts) tasks"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-txt",children:"/tasks\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Spec Kit Tasks",src:i(9299).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.p,{children:"A tasks.md file has been created, with a list of tasks that need to be completed in order to implement the plan. The tasks are broken down into sections, based on the plan, and each task has a description and acceptance criteria. One thing worth noting is that Spec Kit and generative AI like Tests! Even for this scenario, where we are creating a Platform Landing Zone, there are still tasks around creating test scenarios and test scaffolding, which we may not necessarily need, so now is the time to strip this out, make any final adjustments, and verify that the Tasks that will be completed are what we wanted."}),"\n",(0,a.jsx)(t.h2,{id:"-analyzing-for-consistency",children:"\ud83d\udd2c Analyzing for Consistency"}),"\n",(0,a.jsx)(t.p,{children:"Before we proceed to the implementation stage, we can run the analyze command, which will check for consistency across all artifacts and ensure that there are no gaps or contradictions in the specifications, useful if you have run through this in multiple sittings or have adjusted the spec or plan files manually."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-txt",children:"/analyze\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Spec Kit Analyze",src:i(92433).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.p,{children:"We can see there is a lot of ambiguity in our spec, ie we have specified a specific region 'New Zealand North' but not specified any Disaster Recovery requirements, or disallowed Resource Type policy will be deployed, but we haven't specified what resources will be allowed, and one of our considerations was 'Cost Optimization and sustainability' but we haven't specified any cost constraints or budget criteria."}),"\n",(0,a.jsx)(t.p,{children:"For Production use cases, it's worth addressing these areas. However, for this post, we will proceed to the implementation stage, and I will utilize generative AI to provide the best recommendations for these areas by suggesting concrete remediation for any reported issues."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Spec Kit Recommendations",src:i(55997).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsxs)(t.p,{children:["Now is the time to make any final adjustments to the spec, plan, or tasks before we proceed to the implementation stage. Once we proceed with implementation, we will generate code based on the functions, so the tasks must be accurate and complete. Now is also the time to confirm the details, i.e., can all resources that will be created based on the Task actually be deployed in the New Zealand North region? For this specific use case, I could have consulted the ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/training/support/mcp?WT.mc_id=AZ-MVP-5004796",children:"Microsoft Learn MCP Server"})," throughout the process to verify and confirm, thereby utilizing relevant MCP servers and tools as needed to incorporate external sources of information or functionality. Spec Kit is not perfect, and it will make mistakes, so its important to review and verify the output at each stage, it also does not replace the need for human expertise in building and archititecting solutions - but it does help to go into the detail, in my opinion its a great assistance ",(0,a.jsx)(t.em,{children:"(or Copilot)"})," in building out and working on the functionality of what you are building, and considering the end to end functionality of that project or feature you are building, in my opinion you will get more out of it for a specific feature or function, rather than something like this, but it is still a great way to ensure that you have a clear foundation for what you want to build before you start implementing the technical solution and give you the base to then work towards and build out further features - the trick is not to over complicate what you are doing and scope it, the artifacts that Spec Kit generates can be used to tell the story of your project and allow for further modernisation and capability uplift going forward without losing the context that may have been in that one architects mind!"]})}),"\n",(0,a.jsx)(t.h2,{id:"-implementation-phase",children:"\ud83d\udcbb Implementation Phase"}),"\n",(0,a.jsx)(t.p,{children:"Now, let's proceed to the implementation stage, where we will generate the Bicep code."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-txt",children:"/implement\n"})}),"\n",(0,a.jsx)(t.p,{children:"We can see it break down the tasks into creating the scaffold for Infrastructure as Code, creating the Bicep modules, creating the Bicep main files, creating the Azure DevOps pipelines, and creating the documentation. Remember, all of this is being generated based on the tasks, which were generated based on the plan, which was generated based on the spec, which was generated based on the constitution and your requirements."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Spec Kit Implement",src:i(92089).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.h2,{id:"-examining-the-generated-bicep-code",children:"\ud83d\udcc1 Examining the Generated Bicep Code"}),"\n",(0,a.jsx)(t.p,{children:"Now, let's take a look at the Bicep it created."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Spec Kit Bicep",src:i(35496).A+"",width:"1838",height:"996"})}),"\n",(0,a.jsx)(t.p,{children:"We can see that it has created a Bicep module for the Virtual Network, and a Bicep module for the Azure Firewall, and policies, however its missing Management Group structure, because we haven't specified any management group policies or structure in our spec, which would have been discovered as part of the earlier phases, another thing is - Azure Verified Modules were not used! This is because, as part of the Test phase, it was designated to create a runnable/lintable skeleton quickly, rather than working with the overhead of pulling in external modules."}),"\n",(0,a.jsx)(t.p,{children:"Long story short, its given me enough of a scaffold to then work from, and I can then go in and adjust the Bicep to use Azure Verified Modules, and add in any additional functionality or configuration that I need, in these cases I would use Spec Kit to focus my attention on the feature enhancements I want to make, vs entirely doing it all from scratch, because we have the constitution already defined, I can now merge my changes from the Bicep scaffold, then use Spec Kit to jump straight into Specify to add the new features I want, and then use the rest of the Spec Kit workflow to implement those changes, and keep the constitution and spec up to date as we work on it."}),"\n",(0,a.jsx)(t.h2,{id:"-lessons-learned-and-improvements",children:"\ud83c\udf93 Lessons Learned and Improvements"}),"\n",(0,a.jsxs)(t.p,{children:["If I were to repeat this process from scratch ",(0,a.jsx)(t.em,{children:"(outside of this blog article)"}),", here are some of the things I would do differently:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Strengthen the spec.md file, to ensure that all requirements are explicitly defined, and there is less need for clarification _(ie, include Management Group, desired parent-child relationships - this could even have been helped by taking a screenshot of the Enterprise Scale Landing Zone diagram and feeding that into the GitHub Copilot to help draft my spec)."}),"\n",(0,a.jsx)(t.li,{children:'Be more specific, ie, "ALL Bicep modules must use Azure Verified Modules where possible and make sure they are pinned to a specific version," or "Generate tenant-scope template for management groups before subscription templates," and "declare pipeline stages, safe deployment practices".'}),"\n",(0,a.jsxs)(t.li,{children:["Adding a policy strategy ",(0,a.jsx)(t.em,{children:"(ie policy initiatives deployed to management scope scope, vs subscription assignments)"})]}),"\n",(0,a.jsx)(t.li,{children:"Remove the need for Tests, or be more specific in the Tests I need (ie, AVM version and retrieval tests, bicep build)."}),"\n",(0,a.jsx)(t.li,{children:"Reduce Placeholder Debt - ie, I could have specified the exact resources I wanted to create, and the naming conventions, tags, and other configuration details, so there was less need for me to go in and adjust the Bicep after it was generated. If something was a placeholder or not clearly defined in the Research, I could have specified in the Tasks to clean these up at the end."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"-conclusion",children:"\ud83c\udfaf Conclusion"}),"\n",(0,a.jsx)(t.p,{children:'Hopefully this has given you a good overview of how to use Spec Kit and Spec-Driven Development to create a Platform Landing Zone using Bicep, and how it can help you to focus on the "what" and "why" before the "how", and ensure that you have a clear understanding of what you want to build before you start implementing the technical solution, and some of the gotchas if you don\'t - in my mind Spec Development is an iterative process, and fast-tracks a lot of the design decisions you would need to make anyway, or know about but may not have documented.'})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},92433:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Analyze-82fa8cc7a7c7e9ad195ca28b8e4233e5.gif"},35496:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Bicep-457b08ce036c6f9e9d94d4842e9e0c0a.gif"},62399:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Clarify-0c9ffb5107ae7170f1bfde998f2ddfe0.gif"},27686:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Constitution-7241c5abb3c58d3f03d54f046426046c.gif"},92089:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Implement-2f0c77191e68fe90023d4f1fc41f12d4.gif"},84945:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Init-06434b1281f135d23ad5e5f70ea538bc.gif"},40738:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Plan-2e19d3cf8ddbb7af06c3ba0df1d18cfb.gif"},55997:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Recommendations-2dd2d7e227fd5a693438bc1f0f52e5db.gif"},21120:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Specify-d1c03e542c0dcde888a638d1f2a3b4df.gif"},9299:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/SpecKit_BicepPLZ_Tasks-4764ea39cbae207ce5a3bb07e26aaf6e.gif"},28453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>r});var n=i(96540);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}},59992:e=>{e.exports=JSON.parse('{"permalink":"/azure/spec-driven-platform-landing-zone-bicep","source":"@site/blog/2025-10-06-speckitbicepplz/index.mdx","title":"Spec-Driven Azure Platform Landing Zone with Bicep","description":"Learn how to use GitHub Spec Kit and Bicep to build an Azure Platform Landing Zone aligned with Cloud Adoption Framework best practices.","date":"2025-10-05T23:07:36.561Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":17.1,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Spec-Driven Azure Platform Landing Zone with Bicep","metaDescription":"Learn how to use GitHub Spec Kit and Bicep to build an Azure Platform Landing Zone aligned with Cloud Adoption Framework best practices.","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"slug":"azure/spec-driven-platform-landing-zone-bicep","keywords":["Azure","Platform Landing Zone","Bicep","Infrastructure as Code","Spec-Driven Development","GitHub Spec Kit","Cloud Adoption Framework","Azure DevOps","Hub and Spoke","Azure Firewall"],"description":"Learn how to use GitHub Spec Kit and Bicep to build an Azure Platform Landing Zone aligned with Cloud Adoption Framework best practices.","date":"2025-10-05T23:07:36.561Z"},"unlisted":false,"nextItem":{"title":"Integrating Microsoft Learn MCP Server with Semantic Kernel","permalink":"/azure/learn-mcp-server-semantic-kernel"}}')}}]);