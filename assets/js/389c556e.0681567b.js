"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[6831],{25478:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>h});var i=t(92799),s=t(74848),a=t(28453);const r={title:"Azure Container Registry Continuous Patching for Security",metaDescription:"Learn how to use Azure Container Registry's Continuous Patching to detect and fix vulnerabilities in container images with Trivy and Copa.",date:new Date("2025-04-25T05:16:22.619Z"),tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"azure",keywords:["Azure","Container Registry","ACR","Continuous Patching","Container Security","Trivy","Copa","Vulnerability Scanning","DevSecOps"],description:"Learn how to use Azure Container Registry's Continuous Patching to detect and fix vulnerabilities in container images with Trivy and Copa."},o=void 0,c={authorsImageUrls:[void 0]},h=[{value:"\ud83d\udee1\ufe0f What is ACR Continuous Patching?",id:"\ufe0f-what-is-acr-continuous-patching",level:2},{value:"\ud83e\uddea Test Environment Setup",id:"-test-environment-setup",level:2},{value:"\u2699\ufe0f How Continuous Patching Works",id:"\ufe0f-how-continuous-patching-works",level:2},{value:"\ud83d\ude80 Getting Started with Continuous Patching",id:"-getting-started-with-continuous-patching",level:2},{value:"\ud83d\udce6 Installing the Required Extension",id:"-installing-the-required-extension",level:3},{value:"\ud83d\udcdd Configuring the Continuous Patching Schema",id:"-configuring-the-continuous-patching-schema",level:3},{value:"\ud83e\uddd0 Running a Dry Run",id:"-running-a-dry-run",level:3},{value:"\ud83d\udcc5 Understanding the Scheduling System",id:"-understanding-the-scheduling-system",level:2},{value:"\u25b6\ufe0f Executing the Workflow",id:"\ufe0f-executing-the-workflow",level:3},{value:"\ud83d\udd27 Reviewing the Created Tasks",id:"-reviewing-the-created-tasks",level:2},{value:"\ud83d\udcca Monitoring Task Execution",id:"-monitoring-task-execution",level:3},{value:"\ud83c\udfaf Viewing the Results",id:"-viewing-the-results",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Last year, I blogged about ",(0,s.jsx)(n.a,{href:"https://luke.geek.nz/azure/automate-container-patching-with-trivy-copacetic-azure-devops/",children:"Container Patching with Azure DevOps, Trivy and Copacetic"}),", and how to use Azure DevOps to automate the patching of your container images using Trivy and Copacetic. This was a great solution, but it required a lot of manual work to set up and maintain. Today, I am going to take a look at Continuous Patching with Azure Container Registry (ACR) and how to use it to automate the patching of your container images."]}),"\n","\n",(0,s.jsx)(n.h2,{id:"\ufe0f-what-is-acr-continuous-patching",children:"\ud83d\udee1\ufe0f What is ACR Continuous Patching?"}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsxs)(n.p,{children:["At the time of writing, this is a ",(0,s.jsx)(n.strong,{children:"Preview feature"}),", so the experience we run through today may change in the future or the feature may be removed entirely."]}),(0,s.jsx)(n.p,{children:"The following limitations apply:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Windows-based container images aren't supported."}),"\n",(0,s.jsx)(n.li,{children:'Only "OS-level" vulnerabilities that originate from system packages will be patched. This includes system packages in the container image managed by an OS package manager such as "apt\u201d and "yum\u201d. Vulnerabilities that originate from application packages, such as packages used by programming languages like Go, Python, and NodeJS, cannot be patched.'}),"\n",(0,s.jsx)(n.li,{children:"End of Service Life (EOSL) images are not supported by Continuous Patching. EOSL images refer to images where updates, security patches, or technical support are no longer available for the underlying operating system. Examples include images based on older operating system versions, such as Debian 8 and Fedora 28. EOSL images will be skipped from the patch, despite having vulnerabilities. The recommended approach is to upgrade the underlying operating system of your image to a supported version."}),"\n"]})]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/azure/container-registry/container-registry-intro?WT.mc_id=AZ-MVP-5004796",children:"Azure Container Registry"}),"'s Continuous Patching feature automates the detection and remediation of operating system(OS) level vulnerabilities in container images. By scheduling regular scans with ",(0,s.jsx)(n.a,{href:"https://trivy.dev/",children:"Trivy"})," and applying security fixes using ",(0,s.jsx)(n.a,{href:"https://project-copacetic.github.io/copacetic/website/",children:"Copa"}),", you can maintain secure, up-to-date images in your registry, without requiring access to source code or build pipelines. Simply customize the schedule and target images to keep your Azure Container Registry(ACR) environment safe and compliant."]}),(0,s.jsx)(n.p,{children:"Here are a few scenarios to use Continuous Patching:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Enforcing container security and hygiene: Continuous Patching enables users to quickly fix OS container CVEs without the need to rebuild from upstream fully."}),"\n",(0,s.jsx)(n.li,{children:"Speed of Use: Continuous Patching eliminates the dependency on upstream updates for specific images by automatically updating packages. Vulnerabilities can appear every day, while popular image publishers may only release new content once a month. With Continuous Patching, you can ensure that container images within your registry are patched as soon as the latest set of OS vulnerabilities is detected."}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"-test-environment-setup",children:"\ud83e\uddea Test Environment Setup"}),"\n",(0,s.jsxs)(n.p,{children:["In my testing, I am going to use the ",(0,s.jsx)(n.a,{href:"https://hub.docker.com/_/api-firewall",children:"api-firewall"})," image, version ",(0,s.jsx)(n.a,{href:"https://hub.docker.com/layers/library/api-firewall/0.6.16/images/sha256-d6538706176b7c481355abb46dbeb25afcb272647e37dc2521e2a40db55a046c",children:"0.6.16"})," that I have pushed to my Azure Container Registry."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Image - Azure Container Registry",src:t(93083).A+"",width:"1534",height:"739"})}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-how-continuous-patching-works",children:"\u2699\ufe0f How Continuous Patching Works"}),"\n",(0,s.jsx)(n.p,{children:"Let's take a look at how this will work."}),"\n",(0,s.jsx)(n.p,{children:"Continuous Patching in ACR creates a new image per patch. ACR relies on a tag convention to version and identify patched images. The two main approaches are incremental and floating."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Feature"}),(0,s.jsx)(n.th,{children:"Incremental Tagging"}),(0,s.jsx)(n.th,{children:"Floating Tagging"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"How It Works"})}),(0,s.jsx)(n.td,{children:"Adds numerical suffix (-1, -2, etc.) to original tag"}),(0,s.jsx)(n.td,{children:'Uses single mutable tag "-patched" that always points to latest version'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Example"})}),(0,s.jsx)(n.td,{children:"If base is python:3.11:- First patch: python:3.11-1- Second patch: python:3.11-2"}),(0,s.jsx)(n.td,{children:"If base is python:3.11:- All patches use: python:3.11-patched"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Special Rules"})}),(0,s.jsx)(n.td,{children:"- Tags -1 to -999 are considered patch tags- Tags with -x where x > 999 are treated as original tags- Avoid pushing your tags ending with -1 to --999- Errors if -999 versions are reached"}),(0,s.jsx)(n.td,{children:"Tag automatically updates with each new patch"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Version History"})}),(0,s.jsx)(n.td,{children:"Preserved (each patch gets unique tag)"}),(0,s.jsx)(n.td,{children:"Not preserved (single tag is updated)"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Image - Azure Container Registry",src:t(93756).A+"",width:"1312",height:"868"})}),"\n",(0,s.jsx)(n.p,{children:"Incremental (default) is ideal for environments where auditability and rollbacks are crucial, as a unique tag identifies each new patch."}),"\n",(0,s.jsx)(n.p,{children:"Floating is ideal if you prefer a single pointer to the latest patch for your CI/CD pipelines. Reduces complexity by eliminating the need to update references in downstream applications with each patch, but sacrifices strict versioning, making it challenging to roll back."}),"\n",(0,s.jsx)(n.h2,{id:"-getting-started-with-continuous-patching",children:"\ud83d\ude80 Getting Started with Continuous Patching"}),"\n",(0,s.jsxs)(n.p,{children:["So let us get started. To begin, I will utilize my ",(0,s.jsx)(n.a,{href:"https://github.com/lukemurraynz/Codespace_IaC_Coding",children:"Codespace_IaC_Coding"})," Codespace configuration, which already meets the prerequisites I need, specifically ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/cli/azure/what-is-azure-cli?WT.mc_id=AZ-MVP-5004796",children:"Azure CLI"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"-installing-the-required-extension",children:"\ud83d\udce6 Installing the Required Extension"}),"\n",(0,s.jsx)(n.p,{children:"To start, we need to install the CLI extension for ACR Continuous Patching:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"az extension add --source https://acrcssc.z5.web.core.windows.net/debug/acrcssc-1.0.0b2-py3-none-any.whl\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Install Custom extension",src:t(90100).A+"",width:"1567",height:"312"})}),"\n",(0,s.jsx)(n.p,{children:"Then we need to log in to our Azure Container Registry:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"az login\naz acr login -n <myRegistry>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Login to ACR",src:t(44046).A+"",width:"1567",height:"312"})}),"\n",(0,s.jsx)(n.h3,{id:"-configuring-the-continuous-patching-schema",children:"\ud83d\udcdd Configuring the Continuous Patching Schema"}),"\n",(0,s.jsx)(n.p,{children:"Now we need to prepare the JSON schema that we will use to configure our Continuous Patching."}),"\n",(0,s.jsx)(n.p,{children:"This schema defines which repositories and tags to patch, when to patch them, and how to tag the patched images."}),"\n",(0,s.jsx)(n.p,{children:"The schema includes these key components:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"version"})," - Used by the ACR team to track schema versions. Don't modify this unless instructed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tag-convention"}),' - Optional field that specifies the tagging method. Values can be "incremental" (default) or "floating".']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"repositories"})," - An array of objects containing:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"repository"})," - The name of the repository to patch"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tags"})," - Array of specific tags to patch (use wildcard ",(0,s.jsx)(n.code,{children:"*"})," to include all tags)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enabled"})," - Boolean (true/false) to enable or disable patching for this repository"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "version": "v1",\n  "tag-convention": "incremental",\n  "repositories": [\n    {\n      "repository": "api-firewall",\n      "tags": ["0.6.7", "latest"],\n      "enabled": true\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"So let us create the file as below:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'cat <<EOF > continuouspatching.json\n{\n  "version": "v1",\n  "tag-convention": "incremental",\n  "repositories": [\n    {\n      "repository": "api-firewall",\n      "tags": ["0.6.7", "latest"],\n      "enabled": true\n    }\n  ]\n}\nEOF\n'})}),"\n",(0,s.jsx)(n.h3,{id:"-running-a-dry-run",children:"\ud83e\uddd0 Running a Dry Run"}),"\n",(0,s.jsx)(n.p,{children:"Next, we can run a dry run of the supply-chain workflow to validate that our repository and tags are correct:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"az acr supply-chain workflow create -r myRegistry -g myResourceGroup -t continuouspatchv1 --config ./continuouspatching.json --schedule 1d --dry-run   \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Image - ACR Continuous Patching",src:t(7999).A+"",width:"1567",height:"312"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also view the run in the Azure Portal, and see it pull the CSSC ",(0,s.jsx)(n.em,{children:"(Microsoft's Containers Secure Supply Chain (CSSC) framework)"})," image to run the workflow."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Image - ACR Continuous Patching",src:t(72829).A+"",width:"1427",height:"904"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"az acr supply-chain workflow update"})," command to update the workflow configuration, if needed, at a later stage."]})}),"\n",(0,s.jsx)(n.h2,{id:"-understanding-the-scheduling-system",children:"\ud83d\udcc5 Understanding the Scheduling System"}),"\n",(0,s.jsx)(n.p,{children:"Before we do, let's understand how scheduling works in ACR Continuous Patching."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The scheduling system works like a calendar with fixed dates each month, not like a countdown timer!"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"--schedule"})," parameter sets how many days between patch runs, but these always align to fixed days counting from the 1st of each month. Think of it like marking specific dates on a calendar."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if you choose ",(0,s.jsx)(n.code,{children:"--schedule 7d"}),", patching will run on the 1st, 8th, 15th, 22nd, and 29th of each month (every 7 days from the 1st)."]}),"\n",(0,s.jsx)(n.p,{children:"Here's what happens with different schedule values:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Schedule"}),(0,s.jsx)(n.th,{children:"Runs on these days each month"}),(0,s.jsx)(n.th,{children:"Example"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"1d"})}),(0,s.jsx)(n.td,{children:"Every day"}),(0,s.jsx)(n.td,{children:"Patches run daily"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"3d"})}),(0,s.jsx)(n.td,{children:"1st, 4th, 7th, 10th, 13th, 16th, 19th, 22nd, 25th, 28th, 31st"}),(0,s.jsx)(n.td,{children:"If today is the 5th, next run is on the 7th"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"7d"})}),(0,s.jsx)(n.td,{children:"1st, 8th, 15th, 22nd, 29th"}),(0,s.jsx)(n.td,{children:"If today is the 10th, next run is on the 15th"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"14d"})}),(0,s.jsx)(n.td,{children:"1st, 15th, 29th"}),(0,s.jsx)(n.td,{children:"If today is the 20th, next run is on the 29th"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"30d"})}),(0,s.jsx)(n.td,{children:"1st, 31st (if month has 31 days)"}),(0,s.jsx)(n.td,{children:"Runs at the beginning and end of the month"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["When you add the ",(0,s.jsx)(n.code,{children:"--run-immediately"})," flag, a patch happens right away, and then the next one follows the regular schedule."]}),"\n",(0,s.jsxs)(n.p,{children:["Remember: The schedule always resets at the beginning of each month. So if your last patch in January was on the 29th with a ",(0,s.jsx)(n.code,{children:"7d"})," schedule, the next one will be on February 1st, not February 5th."]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-executing-the-workflow",children:"\u25b6\ufe0f Executing the Workflow"}),"\n",(0,s.jsx)(n.p,{children:"Now let's run the workflow:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"az acr supply-chain workflow create -r myRegistry -g myResourceGroup -t continuouspatchv1 --config ./continuouspatching.json --schedule 14d --run-immediately --verbose\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.p,{children:"If you get the following warning:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Failed to validate and deploy template: (DeploymentFailed) At least one resource deployment operation failed. Please list deployment operations for details. Please see https://aka.ms/arm-deployment-operations for usage details. Code: DeploymentFailed Message: At least one resource deployment operation failed. Please list deployment operations for details. Please see https://aka.ms/arm-deployment-operations for usage details. Target: /subscriptions/11b74992-d520-46e1-a9e9-b55c57d2e890/resourceGroups/acrcontinuouspatchingtest/providers/Microsoft.Resources/deployments/continuouspatchingdeployment Exception Details:      (RoleAssignmentUpdateNotPermitted) Tenant ID, application ID, principal ID, and scope are not allowed to be updated.         Code: RoleAssignmentUpdateNotPermitted         Message: Tenant ID, application ID, principal ID, and scope are not allowed to be updated.      (RoleAssignmentUpdateNotPermitted) Tenant ID, application ID, principal ID, and scope are not allowed to be updated."})}),(0,s.jsx)(n.p,{children:"It may mean that the Tasks have existed before, but if the Tasks were deleted in the portal, then it won't have removed the permission assignments."}),(0,s.jsx)(n.p,{children:"You can check the permissions in the Access control (IAM) portal, and if they exist, you can delete them manually from the portal."}),(0,s.jsxs)(n.p,{children:["If you run the following workflow delete command ",(0,s.jsx)(n.em,{children:"(preferred)"}),", it will delete the assigned RBAC permissions as well:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"az acr supply-chain workflow delete -r myRegistry -g myResourceGroup -t continuouspatchv1 --yes\n"})})]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You can add the ",(0,s.jsx)(n.code,{children:"--verbose"})," flag to the command to get more detailed output during the workflow creation process and the ",(0,s.jsx)(n.code,{children:"--debug"})," flag to get even more detailed output, including the HTTP requests and responses sent to Azure."]})}),"\n",(0,s.jsx)(n.h2,{id:"-reviewing-the-created-tasks",children:"\ud83d\udd27 Reviewing the Created Tasks"}),"\n",(0,s.jsx)(n.p,{children:"Now that the Tasks have been created, you can see them in the Azure Portal."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Image - ACR Continuous Patching",src:t(61674).A+"",width:"1355",height:"389"})}),"\n",(0,s.jsx)(n.p,{children:"You can also run the following command to see the state of the workflows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"az acr supply-chain workflow show -r myRegistry -g myResourceGroup -t Continuouspatchv1  -o table\n"})}),"\n",(0,s.jsx)(n.p,{children:"The workflow creates three tasks in your Azure Container Registry:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Task Name"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"cssc-trigger-workflow"})}),(0,s.jsx)(n.td,{children:"Triggers the continuous patching workflow based on your configured schedule"}),(0,s.jsx)(n.td,{children:"This is the main scheduler that runs on your defined schedule (every 14 days in our example). It checks which repositories match your configuration and initiates the scanning process."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"cssc-scan-image"})}),(0,s.jsx)(n.td,{children:"Performs vulnerability scanning using Trivy"}),(0,s.jsx)(n.td,{children:"This task scans your container images for OS-level vulnerabilities. If vulnerabilities are found, it automatically triggers the patching task."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"cssc-patch-image"})}),(0,s.jsx)(n.td,{children:"Applies security patches using Copacetic"}),(0,s.jsx)(n.td,{children:"This task does the actual patching work, fixing OS vulnerabilities in your container images without needing to rebuild them from source."})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"These three tasks work together to form a complete patching pipeline: the trigger starts on schedule, the scanner identifies vulnerabilities, and the patcher automatically fixes them."}),"\n",(0,s.jsx)(n.h3,{id:"-monitoring-task-execution",children:"\ud83d\udcca Monitoring Task Execution"}),"\n",(0,s.jsx)(n.p,{children:"You can check the logs of the run by looking up the recent Runs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"az acr task logs --registry myRegistry\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Image - ACR Continuous Patching",src:t(79932).A+"",width:"1424",height:"697"})}),"\n",(0,s.jsx)(n.h2,{id:"-viewing-the-results",children:"\ud83c\udfaf Viewing the Results"}),"\n",(0,s.jsx)(n.p,{children:"Now, if we go into the repositories in the Azure Portal, we can see that the image has been patched with the incremental tag."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Image - Azure Container Registry",src:t(9500).A+"",width:"979",height:"410"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},7999:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ACR_ContinuousPatching_DryRun_SupplyChain-603d2d21a835ab6c96ae67d3420dd5c4.gif"},90100:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ACR_ContinuousPatching_InstallExtension-57e1b5c89e8cd11fb261b36e76a0a9f8.gif"},44046:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ACR_ContinuousPatching_LoginAzureACR-07600f44193d9ee82b6cf85a33b4c2ea.gif"},93083:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ContinuousPatching_ACR_APIFirewallImageBefore-dce33642a27641f40c03cfa5f94d07d0.jpg"},72829:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ContinuousPatching_ACR_DryRun_AzurePortal-1939ee81d3ed66fc00641542c76b360f.jpg"},79932:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ContinuousPatching_ACR_Logs-90da0d0534e4ad212fd5f823d9960350.jpg"},9500:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ContinuousPatching_ACR_Patched-648c61e407761be61dcff3dc5dc424fe.jpg"},61674:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ContinuousPatching_ACR_Run_TasksAzurePortal-26db6c4b7b7ae19c124e940bed4da868.jpg"},93756:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/patching_timeline_example1-5a26b93211e3b33dae083218aa7fdef9.png"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},92799:e=>{e.exports=JSON.parse('{"permalink":"/azure","source":"@site/blog/2025-04-25-acrcontinouspatching/index.mdx","title":"Azure Container Registry Continuous Patching for Security","description":"Learn how to use Azure Container Registry\'s Continuous Patching to detect and fix vulnerabilities in container images with Trivy and Copa.","date":"2025-04-25T05:16:22.619Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":9.355,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Azure Container Registry Continuous Patching for Security","metaDescription":"Learn how to use Azure Container Registry\'s Continuous Patching to detect and fix vulnerabilities in container images with Trivy and Copa.","date":"2025-04-25T05:16:22.619Z","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"slug":"azure","keywords":["Azure","Container Registry","ACR","Continuous Patching","Container Security","Trivy","Copa","Vulnerability Scanning","DevSecOps"],"description":"Learn how to use Azure Container Registry\'s Continuous Patching to detect and fix vulnerabilities in container images with Trivy and Copa."},"unlisted":false,"nextItem":{"title":"Processing SFTP Events with Azure Function and Event Hub","permalink":"/azure/sftp-event-hub-function"}}')}}]);