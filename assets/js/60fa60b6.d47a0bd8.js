"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[5553],{19347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(85893),s=n(11151);const o={title:"Tag Azure Resources with Owner using Azure Automation",metaDescription:"Tag Azure Resources with Owner using Azure Automation runbook",date:new Date("2024-03-07T07:10:25.200Z"),tags:["Azure"],categories:["Azure"],authors:["Luke"],header:{teaser:"BlogHeading_TagAzureResourceswithOwnerAzureAutomation.png"},slug:"azure/tag-azure-resources-owner-azure-automation-runbook",keywords:["azure","runbook","tag","azureresource","azureautomation","powershell"],description:"Tag Azure Resources with Owner using Azure Automation runbook"},a=void 0,i={permalink:"/azure/tag-azure-resources-owner-azure-automation-runbook",source:"@site/blog/2024-03-06-tag-owner-azresource/index.mdx",title:"Tag Azure Resources with Owner using Azure Automation",description:"Tag Azure Resources with Owner using Azure Automation runbook",date:"2024-03-07T07:10:25.200Z",formattedDate:"March 7, 2024",tags:[{label:"Azure",permalink:"/tags/azure"}],readingTime:5.035,hasTruncateMarker:!0,authors:[{name:"Luke Murray",title:"Author",url:"https://luke.geek.nz",imageURL:"https://luke.geek.nz/img/logo.png",key:"Luke"}],frontMatter:{title:"Tag Azure Resources with Owner using Azure Automation",metaDescription:"Tag Azure Resources with Owner using Azure Automation runbook",date:"2024-03-07T07:10:25.200Z",tags:["Azure"],categories:["Azure"],authors:["Luke"],header:{teaser:"BlogHeading_TagAzureResourceswithOwnerAzureAutomation.png"},slug:"azure/tag-azure-resources-owner-azure-automation-runbook",keywords:["azure","runbook","tag","azureresource","azureautomation","powershell"],description:"Tag Azure Resources with Owner using Azure Automation runbook"},unlisted:!1,nextItem:{title:"Enterprise Policy as Code with Azure DevOps",permalink:"/azure/enterprise-policy-code-azure-devops"}},u={authorsImageUrls:[void 0]},c=[];function d(e){const t={a:"a",admonition:"admonition",code:"code",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Inspired by ",(0,r.jsx)(t.a,{href:"https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/tagging-azure-resources-with-a-creator/ba-p/1479819?WT.mc_id=AZ-MVP-5004796",children:"Tagging Azure Resources with a Creator"})," an Azure function + event grid solution, that will tag resources with the creator of the resource. I wanted to see if I could do the same thing using Azure Automation runbooks, instead of using event grid but a schedule instead, to make use of an already existing ",(0,r.jsx)(t.a,{href:"https://learn.microsoft.com/azure/automation/overview?WT.mc_id=AZ-MVP-5004796",children:"Azure Automation"})," account."]}),"\n",(0,r.jsx)(t.p,{children:"It turns out you can, so let's take a look."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Blog Heading - Tag Azure Resources with Owner using Azure Automation runbook",src:n(2628).Z+"",width:"1200",height:"627"})}),"\n","\n",(0,r.jsx)(t.p,{children:"Make sure to change the ManagementGroupID variable to match your own environment."}),"\n",(0,r.jsx)(t.p,{children:"This runbook uses a System Managed Identity from the Azure Automation account, so make sure this has Contributor rights to the subscription or management group you want to tag resources in."}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsx)(t.p,{children:"This PowerShell script is designed to tag Azure resources with the user's email address who last modified them. It's particularly useful for tracking who is responsible for each resource in your Azure environment. Here's a step-by-step breakdown of what the script does:"}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Disable AzContext Autosave"}),": The script starts by disabling the autosave feature for the Azure context. This ensures the script doesn't inherit any Azure context from previous sessions."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Suppress Warnings"}),": The script suppresses warnings related to breaking changes in Azure PowerShell. This is to prevent these warnings from cluttering the output."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Import Modules"}),": The script imports the Az.Accounts and Az.Resources modules, which provide the cmdlets needed to interact with Azure."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Define Variables"}),": The script defines a variable for the tag name (",(0,r.jsx)(t.code,{children:"$tagName"}),") and the management group ID (",(0,r.jsx)(t.code,{children:"$ManagementGroupID"}),")."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Connect to Azure"}),": The script uses a Managed Service Identity."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Get Subscriptions"}),": The script defines a function (",(0,r.jsx)(t.code,{children:"Get-AzSubscriptionsFromManagementGroup"}),") that retrieves all the subscription IDs under a specified management group, including subscriptions under child management groups. It then calls this function to get the subscription IDs under the management group specified by ",(0,r.jsx)(t.code,{children:"$ManagementGroupID"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Process Each Subscription"}),": For each subscription ID retrieved, the script sets the Azure context to that subscription and retrieves all resources in the subscription."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Process Each Resource"}),": For each resource in the subscription, the script checks if the resource has a tag with the name specified by ",(0,r.jsx)(t.code,{children:"$tagName"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Add Tag If Not Present"}),": If the resource does not have a tag with the name specified by ",(0,r.jsx)(t.code,{children:"$tagName"}),", the script retrieves the Azure activity logs for the resource for the past seven days and finds the user's email address who last modified the resource. It then adds a tag to the resource with the name specified by ",(0,r.jsx)(t.code,{children:"$tagName"})," and the value set to the user's email address.\nThis script is designed to be run on a schedule, such as once a day, to ensure that all resources are tagged with the user's email address who last modified them."]}),"\n"]}),(0,r.jsx)(t.mermaid,{value:"graph TD\n  A[Start] --\x3e B[Disable AzContext Autosave]\n  B --\x3e C[Suppress Warnings]\n  C --\x3e D[Import Modules]\n  D --\x3e E[Define Variables]\n  E --\x3e F[Connect to Azure]\n  F --\x3e G[Get Subscriptions]\n  G --\x3e H{For Each Subscription}\n  H --\x3e I[Set Azure Context]\n  I --\x3e J[Get All Resources]\n  J --\x3e K{For Each Resource}\n  K --\x3e L[Check If Tag Exists]\n  L --\x3e |No|M[Get Azure Activity Logs]\n  M --\x3e N[Find Last Modified User]\n  N --\x3e O[Add Tag]\n  O --\x3e P[End]\n  L --\x3e |Yes|P\n  K --\x3e H"})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Tag Azure Resources with Owner",src:n(62943).Z+"",width:"1905",height:"964"})}),"\n",(0,r.jsx)(t.p,{children:"The Runbook is as follows:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-powershell",children:'<# Ensures you do not inherit an AzContext in your runbook #>\nDisable-AzContextAutosave -Scope Process | Out-Null;\n\n#Toggle to stop warnings with regard to Breaking Changes in Azure PowerShell\nSet-Item -Path Env:\\SuppressAzurePowerShellBreakingChangeWarnings -Value $true\n\n# Import the required modules\nImport-Module Az.Accounts\nImport-Module Az.Resources\n\n# Define the tag name as a variable\n$tagName = "Createdby"\n\n#Adjust to suit your management group; this is the top scope that the Script will run under\n$ManagementGroupID = \'mg-landingzones\'\n\n\n<# Connect using a Managed Service Identity #>\n\nConnect-AzAccount -Identity\n\n\n\n# Get the subscription IDs under the specified management group AND child management groups\nfunction Get-AzSubscriptionsFromManagementGroup {\n    param($ManagementGroupName)\n    $mg = Get-AzManagementGroup -GroupId $ManagementGroupName -Expand\n    foreach ($child in $mg.Children) {\n        if ($child.Type -match \'/managementGroups$\') {\n            Get-AzSubscriptionsFromManagementGroup -ManagementGroupName $child.Name\n        }\n        else {\n            $child | Select-Object @{N = \'Name\'; E = { $_.DisplayName } }, @{N = \'Id\'; E = { $_.Name } }\n        }\n    }\n}\n\n\nWrite-Output "Setting ManagementGroupID to $($mgid.DisplayName)\'..."\n\nWrite-Output "Retrieving management group with ID \'$ManagementGroupID\'..."\n$mgid = Get-AzManagementGroup -GroupId $ManagementGroupID -Expand\n\nWrite-Output "Successfully retrieved management group with ID \'$ManagementGroupID\'."\n\nWrite-Output "Retrieving subscription IDs from management group \'$($mgid.DisplayName)\'..."\n\n$subIds = Get-AzSubscriptionsFromManagementGroup -ManagementGroupName $ManagementGroupID \n\nforeach ($subId in $subIds) {\n    Write-Output "Setting subscription context for subscription $subId..."\n    Set-AzContext -Subscription $subId.Id\n\n    $resources = Get-AzResource \n\n    Write-Output "Found resources in subscription $subId."\n\n    foreach ($resource in $resources) {\n        Write-Output "Processing resource $($resource.Name)..."\n        $tags = $resource.Tags\n        if ($null -ne $tags -and -not $tags.ContainsKey($tagName)) {          \n            Write-Output "Resource $($resource.Name) does not have \'resource-owner\' and  tags. Adding tags..."\n\n            $endTime = Get-Date\n            $startTime = $endTime.AddDays(-7)\n            $owners = Get-AzLog -ResourceId $resource.ResourceId -StartTime $startTime -EndTime $endTime |\n            Where-Object { $_.Authorization.Action -like "*/write*" } |\n            Select-Object -ExpandProperty Caller \n            $owner = $owners | Where-Object { $_ -match "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$" } | Select-Object -First 1\n\n            #Objects created by a Service Principal will tag the objects with a GUID instead of a name by default. You can fix this behavior by giving the Managed Identity the Application Developer role in Entra ID. \n\n            # If owner is null, stop the script\n            if ($null -eq $owner) {\n                Write-Output "No owner found that matches an email address."\n            }\n            \n            # Output owners\n            Write-Output "Owners: $owners, selected owner: $owner"\n            $existingTags = $resource.Tags\n            $modifiedTags = @{\n                $tagName = $owner\n            }\n            # Merge existing tags with new tags\n            $allTags = $existingTags + $modifiedTags\n\n            $resource | Set-AzResource -Tag $allTags -Force\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["The script is also held on ",(0,r.jsx)(t.a,{href:"https://github.com/lukemurraynz/Azure/blob/main/Azure%20Automation/Tag-ResourceOwner.ps1",children:"GitHub"}),", so feel free to raise an Issue or Pull Request if you have any improvements.\nIf there are no logged users due to the resource being written to or created outside of the Log retention, the resource will be skipped."]})}),"\n",(0,r.jsxs)(t.p,{children:["This script could be extended with the ",(0,r.jsx)(t.a,{href:"https://techcommunity.microsoft.com/t5/azure-governance-and-management/announcing-the-public-preview-of-change-actor/ba-p/4076626?WT.mc_id=AZ-MVP-5004796#:~:text=Identifying%20who%20made%20a%20change,all%20your%20tenants%20and%20subscriptions",children:"Change Actor feed"})," to determine who made a recent change to the resource."]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},2628:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/BlogHeading_TagAzureResourceswithOwnerAzureAutomation-55e6ea6bd6488ab6d0b4a8794fd4696e.png"},62943:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Tag_Owner-RunbookRun-97574d5317f6c9877723c2255265e661.gif"},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var r=n(67294);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);