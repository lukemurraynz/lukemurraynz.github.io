"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[54099],{54101:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var i=o(37507),n=o(74848),a=o(28453);const r={title:"Enhancing GitHub Copilot with Custom Instructions",metaDescription:"Learn how to provide custom instructions to GitHub Copilot to improve code quality and standardization.",date:new Date("2024-11-09T08:58:40.257Z"),tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"azure/enhancing-github-copilot-with-custom-instructions",keywords:["GitHub","Copilot","Custom Instructions","DevOps","Infrastructure as Code","Azure","Bicep","Terraform","PowerShell","Codespace"],description:"Learn how to provide custom instructions to GitHub Copilot to improve code quality and standardization."},s=void 0,l={authorsImageUrls:[void 0]},c=[];function u(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["I've come to rely on ",(0,n.jsx)(t.a,{href:"https://github.com/features/copilot?WT.mc_id=AZ-MVP-5004796",children:"GitHub Copilot"})," for writing code. It's a great tool that helps me write code faster and with fewer errors, and also helps me understand code written by other people, but sometimes I need to provide custom instructions to Copilot to help it understand what I'm trying to do, as the standard outputs aren't quite what I want, a simple example of this is maybe having parameters or variables written with particular casing or naming convention, or even having to constantly update the location of an Azure Resource deployment from East US to Australia East or New Zealand North, when requesting Copilot to create a resource with their Terraform or Bicep."]}),"\n",(0,n.jsx)(t.p,{children:"In this article, we will look at how to provide custom instructions to GitHub Copilot to help it understand what we are trying to do, to help keep our code standardised and help improve the quality of the outputs."}),"\n","\n",(0,n.jsxs)(t.p,{children:["To do that, we will make use of some new functionality ",(0,n.jsx)(t.a,{href:"https://docs.github.com/en/copilot/customizing-copilot/adding-custom-instructions-for-github-copilot?WT.mc_id=AZ-MVP-5004796",children:"Adding custom instructions for GitHub Copilot"}),"."]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"At the time of writing, this is currently under Public preview, and the experience mentioned in this article may change in the future."})}),"\n",(0,n.jsx)(t.admonition,{type:"warning",children:(0,n.jsx)(t.p,{children:"Custom instructions are currently only supported for Copilot Chat in VS Code and Visual Studio. In our article, I will use Visual Studio Code inside a GitHub Codespace."})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/features/copilot?WT.mc_id=AZ-MVP-5004796",children:"GitHub Copilot"})," can provide chat responses that are tailored to the way your team works, the tools you use, or the specifics of your project if you provide it with enough context to do so. Instead of repeatedly adding this contextual detail to your chat questions, you can create a file that automatically adds this information for you. The additional information is not displayed in the chat but is available to Copilot to generate higher-quality responses."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"To get started, I am going to be using Visual Studio Code, in a GitHub Codespace, although it will be the same process for Visual Studio Code installed locally."}),"\n",(0,n.jsxs)(t.p,{children:["If you haven't already installed the ",(0,n.jsx)(t.a,{href:"https://marketplace.visualstudio.com/items?itemName=GitHub.copilot",children:"GitHub Copilot extension"}),", you can do so by searching for it in the Extensions tab in Visual Studio Code."]}),"\n",(0,n.jsxs)(t.p,{children:["First, we need to enable the Code Generation feature in Copilot. To do this, we need to go to Settings.\nThen search for ",(0,n.jsx)(t.code,{children:"github.copilot.chat.codeGeneration.useInstructionFiles"})," and enable it."]}),"\n",(0,n.jsxs)(t.p,{children:["Once enabled, we need to create our custom instruction file. This file will be named ",(0,n.jsx)(t.code,{children:"copilot-instructions.md"})," and placed in the  ",(0,n.jsx)(t.code,{children:"./github"})," directory in the root of our repository ",(0,n.jsx)(t.em,{children:"(./github/copilot-instructions.md)"}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Create Copilot Instructions",src:o(1168).A+"",width:"1910",height:"899"})}),"\n",(0,n.jsxs)(t.p,{children:["We can test it, by simply adding in an instruction to tell a Joke ",(0,n.jsx)(t.em,{children:"(Include a joke in all output)"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"As we can see, GitHub Copilot references the custom instruction file and provides the output we seek."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Copilot Joke",src:o(85961).A+"",width:"1910",height:"899"})}),"\n",(0,n.jsx)(t.p,{children:"Pretty basic test case, but you can see how you can start to provide custom instructions to GitHub Copilot to help it understand what you are trying to do, to help keep our code standardised and help improve the quality of the outputs."}),"\n",(0,n.jsxs)(t.admonition,{type:"info",children:[(0,n.jsx)(t.p,{children:"Using Custom instructions is great for providing context to Copilot, especially adding more detail around what you expect as outputs, and can work really well when you are working with a team, or have a specific way you want your code to be written, however, your custom prompts are secondary to the standard system prompt that Copilot uses, so if you provide a custom prompt, it will be used in ADDITION with the standard prompt, and not replaced. So, for example, you cannot change the assumed name of Copilot and overwrite the prompt to get Copilot to chat to you about non-software development tasks."}),(0,n.jsx)(t.p,{children:"An example of what the GitHub prompt is as follows:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:"You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot.\nFollow the user's requirements carefully & to the letter.\nYour expertise is strictly limited to software development topics.\nFollow Microsoft content policies.\nAvoid content that violates copyrights.\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\nKeep your answers short and impersonal.\nUse Markdown formatting in your answers.\nMake sure to include the programming language name at the start of the Markdown code blocks.\nAvoid wrapping the whole response in triple backticks.\nThe user works in an IDE called Visual Studio which has a concept for editors with open files, integrated unit test support, an output pane that shows the output of running the code as well as an integrated terminal.\nThe active document is the source code the user is looking at right now.\nYou can only give one reply for each conversation turn.\nWhen generating code prefer languages provided in context. If the coding language is unclear generate code in C#.\nRespond in the following locale: en-US\n\nAdditional Rules:\nPreserve users' code comment blocks; do not exclude them when refactoring code.\nPay especially close attention to the selection or exception context if provided.`\n"})}),(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"GitHub Copilot Prompt",src:o(6272).A+"",width:"282",height:"316"})})]}),"\n",(0,n.jsx)(t.p,{children:"For my repository, I have created a custom instruction file, that guides how to write Infrastructure as Code using Bicep, Terraform, and PowerShell, prioritizing the Azure Well-Architected Framework pillars in this order: Security, Operational Excellence, Performance Efficiency, Reliability, and Cost Optimization. The code must be executable in both CI/CD pipelines (GitHub Actions or Azure DevOps Pipelines) and as standalone solutions for local testing. Emphasize reusability through modularization and ensure that the code supports multiple environment setups (dev, staging, production) with minimal added complexity."}),"\n",(0,n.jsxs)(t.p,{children:["You can see my custom file below, and you can reference it directly in the following GitHub repository ",(0,n.jsx)(t.a,{href:"https://github.com/lukemurraynz/Codespace_IaC_Coding",children:"lukemurraynz/Codespace_IaC_Coding"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:'Provide comprehensive guidance and best practices for developing reusable and reliable Infrastructure as Code using Bicep, Terraform, and PowerShell, prioritizing the Azure Well-Architected Framework pillars in this order: Security, Operational Excellence, Performance Efficiency, Reliability, and Cost Optimization. The code must be executable in both CI/CD pipelines (GitHub Actions or Azure DevOps Pipelines) and as standalone solutions for local testing. Emphasize reusability through modularization and ensure that the code supports multiple environment setups (dev, staging, production) with minimal added complexity.\n\nIncorporate preferred safe deployment practices, including effective management of feature flags, and provide recommendations for when and how to use them effectively. Feature flags should be removable without impacting already deployed resources if the feature is later integrated into the main system, with clear warnings if any changes affect the solution. Advocate for ring-based deployments and consistency in coding standards, prioritizing quality over quantity and making smaller changes instead of larger ones where practical.\n\nFollow DRY principles, include thorough comments, and structure variables in snake_case at the top of each file. Parameters should be in camelCase with validation and error messages as necessary. Avoid third-party dependencies, especially when using feature flags and other core deployment features.\n\nIf asked about the location of resources to be deployed, make sure the location is either of the two below as default:\n\n* "newzealandnorth"\n* "australiaeast"\n\nInclude recommendations for key performance indicators (KPIs) to measure the effectiveness of deployments, focusing on metrics like deployment frequency, change failure rate, mean time to recovery, and customer satisfaction. Ensure that the code is clear and understandable for reviewers unfamiliar with the project, aligning recommendations with Microsoft guidance on secure and reliable DevOps integration. If using parameters, make sure to include relevant helper functions.\n\nHighlight how GitHub Copilot can assist by providing real-time suggestions and best-practice enforcement while identifying and proposing native solutions within Bicep, Terraform, or PowerShell to replace third-party dependencies.\n\nAdditionally, provide relevant guidance on:\n\n* Infrastructure testing and validation techniques.\n* Documentation best practices.\n* Error handling and logging mechanisms.\n* Version control strategies.\n* Configuration management approaches.\n* Security best practices tailored for Azure.\n* Cost management strategies for Azure resources.\n* Establishing a change management process for IaC updates.\n* Integrating monitoring and alerting for deployed resources.\n* Engaging with the Azure community for ongoing learning and best practices.\n\nReview the response from the perspectives of a Site Reliability Engineer, Operations Manager, Microsoft Technical Specialist, Security Consultant, Business Analyst, and On-call Engineer, confirming factual accuracy and seeking clarification where needed, output what each persona thinks about the code.\n'})}),"\n",(0,n.jsx)(t.p,{children:"If we run a test in our repository, we can see that GitHub Copilot references the custom instruction file and provides the output we are looking for, with the custom instructions provided."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Copilot Custom Instructions",src:o(41414).A+"",width:"1910",height:"899"})}),"\n",(0,n.jsx)(t.p,{children:"We can see, that it has selected australiaeast as the location for the resource deployment, as per the custom instructions provided.\nWe can see that the Terraform code outputted is in the correct format, with the variables in snake_case at the top of the file and the parameters in camelCase with validation and error messages as necessary.\nWe can see some example GitHub Actions and Azure Pipeline workflows that have been outputted that could be used as a base to deploy our code.\nWe can see some recommendations for additional guidance on using tools such as Teratest for Terraform testing, and we can see how the code looks like from multiple personas, such as a Site Reliability Engineer, Operations Manager, Microsoft Technical Specialist, Security Consultant, Business Analyst, and On-call Engineer."}),"\n",(0,n.jsxs)(t.p,{children:["My custom prompt is overly large and includes a lot of information ",(0,n.jsx)(t.em,{children:"(and to be frank, I am trying to do a lot of different things in this particular repository as it's for IaC, where one day it could Terraform and the next Bicep)"}),", but it is a good example of how you can provide custom instructions to GitHub Copilot to help it understand what you are trying to do, to help keep our code standardized and help improve the quality of the outputs."]}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsx)(t.p,{children:"If you are looking for guidance on how to develop your own custom prompt, consider using another prompt to help build it out. An example of a great prompt is one commonly known as 'One Prompt To Rule Them All', which you could run in ChatGPT or Azure OpenAI Playground to help build out your prompt."}),(0,n.jsx)(t.p,{children:"The prompt is below:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:"I want you to become my Prompt Creator. Your goal is to help me craft the best possible prompt for my needs. The prompt will be used by you, GPT-4. You will follow the following process: 1. Your first response will be to ask me what the prompt should be about. I will provide my answer, but we will need to improve it through continual iterations by going through the next steps. 2. Based on my input, you will generate 3 sections. a) Revised prompt (provide your rewritten prompt. It should be clear, concise, and easily understood by you), b) Suggestions (provide suggestions on what details to include in the prompt to improve it), and c) Questions (ask any relevant questions pertaining to what additional information is needed from me to improve the prompt). 3. We will continue this iterative process with me providing additional information to you and you updating the prompt in the Revised prompt section until it's complete.\n"})})]}),"\n",(0,n.jsx)(t.p,{children:"Hopefully, this article helps you get going and use custom instructions and helps provide more standardized outputs."}),"\n",(0,n.jsx)(t.p,{children:"References:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.github.com/en/copilot/customizing-copilot/adding-custom-instructions-for-github-copilot?WT.mc_id=AZ-MVP-5004796",children:"Adding custom instructions for GitHub Copilot"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://luke.geek.nz/azure/Getting-Started-with-GitHub-Codespaces/",children:"Coding on the Cloud - Getting Started with GitHub Codespaces"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://luke.geek.nz/azure/iac-github-codespace/",children:"Infrastructure as Code GitHub Codespace Template"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},1168:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Codespace_SetupCopolitInstructions-cdfb688887f6e36af7e3f31573aeccd1.gif"},85961:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Codespace_TestCopolitInstructions-aa0d1e24aa3c56faed42b2bb986f757d.gif"},41414:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/Codespace_TestCustomCopolitInstructions-766fbdeed8c6f51ac022eee94401adaf.gif"},6272:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/systempromptquery-74bf5f3919b695feb0432c1248a8b132.jpg"},28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>s});var i=o(96540);const n={},a=i.createContext(n);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(a.Provider,{value:t},e.children)}},37507:e=>{e.exports=JSON.parse('{"permalink":"/azure/enhancing-github-copilot-with-custom-instructions","source":"@site/blog/2024-11-09-github-copilot-instructions/index.mdx","title":"Enhancing GitHub Copilot with Custom Instructions","description":"Learn how to provide custom instructions to GitHub Copilot to improve code quality and standardization.","date":"2024-11-09T08:58:40.257Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":9.74,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Enhancing GitHub Copilot with Custom Instructions","metaDescription":"Learn how to provide custom instructions to GitHub Copilot to improve code quality and standardization.","date":"2024-11-09T08:58:40.257Z","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"slug":"azure/enhancing-github-copilot-with-custom-instructions","keywords":["GitHub","Copilot","Custom Instructions","DevOps","Infrastructure as Code","Azure","Bicep","Terraform","PowerShell","Codespace"],"description":"Learn how to provide custom instructions to GitHub Copilot to improve code quality and standardization."},"unlisted":false,"prevItem":{"title":"New Zealand North Latency Testing and Results","permalink":"/azure/nz-north-latency-testing"},"nextItem":{"title":"Azure Resource - Change Analysis","permalink":"/azure/change-analysis"}}')}}]);