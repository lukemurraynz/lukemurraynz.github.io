"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[39687],{92255:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>p});var r=t(59666),o=t(74848),s=t(28453);const a={title:"Azure Container Apps with VNC and DOSBox",metaDescription:"Learn how to host a VNC server with DOSBox in Azure Container Apps for running legacy applications in a modern environment.",tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"azure/container-apps-vnc-dosbox",keywords:["Azure","Azure Container Apps","Azure Container Registry","VNC Server","DOSBox","noVNC","Container Apps","Legacy Applications","GUI Applications","Docker","Containerization","Ubuntu Container","Remote Desktop","Web-based VNC","XFCE Desktop"],description:"Learn to host a VNC server with DOSBox in Azure Container Apps, enabling access to legacy applications in a modern environment.",date:new Date("2025-08-03T23:33:09.321Z")},i=void 0,c={authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Solution Architecture",id:"solution-architecture",level:2},{value:"Configuration Details",id:"configuration-details",level:3},{value:"Implementation Steps",id:"implementation-steps",level:2},{value:"Step 1: Creating the Container Image",id:"step-1-creating-the-container-image",level:2},{value:"Step 2: Pushing to Azure Container Registry",id:"step-2-pushing-to-azure-container-registry",level:2},{value:"Step 3: Deploying to Azure Container Apps",id:"step-3-deploying-to-azure-container-apps",level:2},{value:"Testing the Solution",id:"testing-the-solution",level:2}];function l(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Today we are going to look at hosting a Container in Container Apps, which is used to host a Container that has a VNC server installed, running DOSBox."}),"\n",(0,o.jsx)(n.p,{children:"Why would you do this? Could be a few reasons, but common reasons might be looking at running legacy applications that require a GUI (Graphical User Interface) in a more modern and isolated environment, allowing for quick internal access to resources, or just for fun."}),"\n","\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"In this guide, we will walk through the process of setting up a VNC server with DOSBox in Azure Container Apps. This setup allows you to run DOS applications in a web browser using noVNC, providing a convenient way to access legacy software without needing a dedicated VM or physical machine."}),"\n",(0,o.jsx)(n.h2,{id:"solution-architecture",children:"Solution Architecture"}),"\n",(0,o.jsx)(n.p,{children:"The solution consists of an Azure Container Registry, an Azure Container Apps environment, and an Azure Container App. The Container App will be running a container that has a VNC server installed and the DOSBox application."}),"\n",(0,o.jsx)(n.h3,{id:"configuration-details",children:"Configuration Details"}),"\n",(0,o.jsx)(n.p,{children:"My scaling configuration for Azure Container Apps is set to a minimum of 1 instance and a maximum of 10 replicas. This is because I want to ensure that the VNC server is always available, and I don't need to scale out for this use case; however, my scale-out settings were set to 10 concurrent requests."}),"\n",(0,o.jsxs)(n.p,{children:["Ingress was configured, HTTP with the target port of 6080 ",(0,o.jsx)(n.em,{children:"(VNC uses port 5900 internally, but it's not exposed as we are publishing the noVNC web client on port 6080, which then talks to the VNC server on port 5900 internally)"}),"."]}),"\n",(0,o.jsx)(n.mermaid,{value:'graph TB\n    User[User] --\x3e Internet[Internet]\n    Internet --\x3e Ingress[Azure Container Apps Ingress<br/>HTTP - Port 6080]\n    \n    subgraph "Azure Container Apps Environment"\n        Ingress --\x3e ContainerApp[Azure Container App<br/>Min: 1 replica<br/>Max: 10 replicas<br/>Scale: 10 concurrent requests]\n        \n        subgraph "Container Instance"\n            ContainerApp --\x3e noVNC[noVNC Web Client<br/>Port 6080]\n            noVNC --\x3e VNCServer[VNC Server<br/>Port 5900 Internal]\n            VNCServer --\x3e DOSBox[DOSBox Application<br/>GUI Interface]\n        end\n    end\n    \n    subgraph "Azure Container Registry"\n        ACR[Container Image<br/>VNC + DOSBox]\n    end\n    \n    ACR -.-> ContainerApp\n    \n    style User fill:#e1f5fe\n    style ContainerApp fill:#f3e5f5\n    style noVNC fill:#e8f5e8\n    style VNCServer fill:#fff3e0\n    style DOSBox fill:#fce4ec\n    style ACR fill:#f1f8e9'}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"NoVNC Container Apps",src:t(4182).A+"",width:"1907",height:"920"})}),"\n",(0,o.jsx)(n.h2,{id:"implementation-steps",children:"Implementation Steps"}),"\n",(0,o.jsx)(n.p,{children:"So the steps to get this working are as follows:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create the container image with VNC + DOSBox"}),"\n",(0,o.jsx)(n.li,{children:"Push to Azure Container Registry"}),"\n",(0,o.jsx)(n.li,{children:"Create Container Apps Environment"}),"\n",(0,o.jsx)(n.li,{children:"Deploy the Container App with proper ingress configuration"}),"\n",(0,o.jsx)(n.li,{children:"Configure scaling rules for concurrent access"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-1-creating-the-container-image",children:"Step 1: Creating the Container Image"}),"\n",(0,o.jsx)(n.p,{children:"I have already completed Task 1 - creating the container image with VNC and DOSBox, and pushed it to Azure Container Registry. The Dockerfile for this image is as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile for VNC + DOSBox\n\nFROM ubuntu:22.04\n\n# Metadata\nLABEL maintainer="Luke Murray" \\\n      description="VNC Server with DOSBox"\n\n# Environment setup\nENV DEBIAN_FRONTEND=noninteractive \\\n    DISPLAY=:1 \\\n    VNC_RESOLUTION=1024x768 \\\n    USER=vncuser \\\n    TZ=Pacific/Auckland\n\n# Install packages\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    tigervnc-standalone-server \\\n    tigervnc-common \\\n    tigervnc-tools \\\n    xfonts-base \\\n    xfce4-panel \\\n    xfce4-session \\\n    xfce4-settings \\\n    xfce4-terminal \\\n    xfwm4 \\\n    xfdesktop4 \\\n    thunar \\\n    dbus-x11 \\\n    x11-xkb-utils \\\n    xkb-data \\\n    keyboard-configuration \\\n    xfconf \\\n    desktop-file-utils \\\n    dosbox \\\n    novnc \\\n    websockify \\\n    tzdata \\\n    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Create user\nRUN groupadd -r vncuser && \\\n    useradd -r -g vncuser -d /home/vncuser -s /bin/bash vncuser && \\\n    mkdir -p /home/vncuser/.vnc /home/vncuser/Desktop && \\\n    chown -R vncuser:vncuser /home/vncuser && \\\n    chmod 700 /home/vncuser/.vnc\n\n# Switch to non-root user\nUSER vncuser\nWORKDIR /home/vncuser\n\n# Setup startup script\nRUN echo \'#!/bin/bash\\n\\\nexport DISPLAY=:1\\n\\\nexport USER=$(whoami)\\n\\\nexport HOME=/home/vncuser\\n\\\nexport SDL_VIDEODRIVER=x11\\n\\\n\\n\\\n# Create VNC startup script\\n\\\ncat > ~/.vnc/xstartup << EOF\\n\\\n#!/bin/bash\\n\\\nunset SESSION_MANAGER DBUS_SESSION_BUS_ADDRESS\\n\\\n# Start D-Bus session\\n\\\nexport \\$(dbus-launch)\\n\\\nexport DBUS_SESSION_BUS_ADDRESS\\n\\\n# Basic X11 setup\\n\\\nsetxkbmap -layout us\\n\\\nxset s off -dpms s noblank\\n\\\n# Start XFCE components in order\\n\\\nxfsettingsd &\\n\\\nsleep 1\\n\\\n# Disable screen savers (ignore errors)\\n\\\nxfconf-query -c xfce4-screensaver -p /saver/enabled -s false 2>/dev/null || true\\n\\\nxfconf-query -c xfce4-screensaver -p /lock/enabled -s false 2>/dev/null || true\\n\\\n# Start thunar without desktop management to avoid errors\\n\\\nthunar --daemon &\\n\\\nsleep 1\\n\\\n# Start XFCE session\\n\\\nexec startxfce4\\n\\\nEOF\\n\\\nchmod +x ~/.vnc/xstartup\\n\\\n\\n\\\n# Create VNC password\\n\\\necho "vncpassword" | tigervncpasswd -f > ~/.vnc/passwd\\n\\\nchmod 600 ~/.vnc/passwd\\n\\\n\\n\\\n# Start services\\n\\\nvncserver :1 -geometry ${VNC_RESOLUTION:-1024x768} -depth 24 -localhost\\n\\\nsleep 5\\n\\\nwebsockify --web=/usr/share/novnc 6080 localhost:5901 &\\n\\\n\\n\\\n# Keep alive\\n\\\nwhile true; do\\n\\\n    if ! ps aux | grep -q "[X]tigervnc"; then\\n\\\n        vncserver :1 -geometry ${VNC_RESOLUTION:-1024x768} -depth 24 -localhost\\n\\\n    fi\\n\\\n    sleep 30\\n\\\ndone\\n\\\n\' > /home/vncuser/start.sh && chmod +x /home/vncuser/start.sh\n\n# DOSBox setup\nRUN mkdir -p dosbox && \\\n    echo \'[sdl]\\nfullscreen=false\\noutput=surface\\nusescancodes=false\\n[dosbox]\\nmachine=svga_s3\\nmemsize=16\\n[mixer]\\nnosound=true\\n[dos]\\nkeyboardlayout=us\\n[autoexec]\\nmount c /home/vncuser/dosbox\\nc:\' > .dosboxrc && \\\n    echo \'[Desktop Entry]\\nVersion=1.0\\nType=Application\\nName=DOSBox\\nComment=DOS Emulator\\nExec=dosbox\\nIcon=dosbox\\nTerminal=false\\nCategories=Game;Emulator;\\nStartupNotify=false\' > Desktop/dosbox.desktop && \\\n    chmod +x Desktop/dosbox.desktop\n\nEXPOSE 6080\n\nHEALTHCHECK CMD grep -q \':1770 \' /proc/net/tcp\n\nCMD ["./start.sh"]\n'})}),"\n",(0,o.jsx)(n.p,{children:"This Dockerfile sets up an Ubuntu-based container with VNC and DOSBox, allowing you to run DOS applications in a GUI environment accessible via a web browser using noVNC."}),"\n",(0,o.jsx)(n.h2,{id:"step-2-pushing-to-azure-container-registry",children:"Step 2: Pushing to Azure Container Registry"}),"\n",(0,o.jsx)(n.p,{children:"Next, we need to push this image to Azure Container Registry. You can do this using the Azure CLI:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"az acr login -n vncappsdemocr --expose-token\naz acr build --registry vncappsdemocr --image vncappsdemo:latest .\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Build Container",src:t(63027).A+"",width:"934",height:"408"})}),"\n",(0,o.jsx)(n.h2,{id:"step-3-deploying-to-azure-container-apps",children:"Step 3: Deploying to Azure Container Apps"}),"\n",(0,o.jsx)(n.p,{children:"After the Container is built, it's time to deploy it to Azure Container Apps. You can do this using the Azure CLI as well:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Create the Container Apps environment \naz containerapp env create --name ContainerAppsEnvVNCDemo --resource-group vnccnappsdemo --location australiaeast\n\n# Enable admin user on ACR (if not already enabled)\naz acr update --name vncappsdemocr --admin-enabled true\n\n# Create a container app with ACR admin credentials\naz containerapp create --name vncappsdemo --resource-group vnccnappsdemo --image vncappsdemocr-ctb0aqa3dkhtd2e6.azurecr.io/vncappsdemo:latest --target-port 6080 --ingress external --cpu 0.5 --memory 1.0Gi --min-replicas 1 --max-replicas 10 --environment ContainerAppsEnvVNCDemo --registry-server vncappsdemocr-ctb0aqa3dkhtd2e6.azurecr.io --registry-username vncappsdemocr --registry-password $(az acr credential show --name vncappsdemocr --query "passwords[0].value" -o tsv)\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Deploy Container Apps VNC Demo",src:t(36604).A+"",width:"934",height:"408"})}),"\n",(0,o.jsx)(n.h2,{id:"testing-the-solution",children:"Testing the Solution"}),"\n",(0,o.jsx)(n.p,{children:"Finally - let's test!"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Test VNC Container Apps",src:t(54255).A+"",width:"1896",height:"932"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},63027:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/BuildContainerNoVNCCAppsDemo-f3f1511189b4a10925f1e7d7a0793629.gif"},36604:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/DeployContainerNoVNCCAppsDemo-108b66248712c37d936849d7e0f194f1.gif"},4182:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/NoVNCCAppsDemo-92ede234ad0757b8d25219bd050eed55.gif"},54255:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/TestContainerNoVNCCAppsDemo-3fdeb7859ac85eb79831f1ea7c5f27d7.gif"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(96540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},59666:e=>{e.exports=JSON.parse('{"permalink":"/azure/container-apps-vnc-dosbox","source":"@site/blog/2025-08-04-cappsvnc/index.mdx","title":"Azure Container Apps with VNC and DOSBox","description":"Learn to host a VNC server with DOSBox in Azure Container Apps, enabling access to legacy applications in a modern environment.","date":"2025-08-03T23:33:09.321Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":5.66,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Azure Container Apps with VNC and DOSBox","metaDescription":"Learn how to host a VNC server with DOSBox in Azure Container Apps for running legacy applications in a modern environment.","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"slug":"azure/container-apps-vnc-dosbox","keywords":["Azure","Azure Container Apps","Azure Container Registry","VNC Server","DOSBox","noVNC","Container Apps","Legacy Applications","GUI Applications","Docker","Containerization","Ubuntu Container","Remote Desktop","Web-based VNC","XFCE Desktop"],"description":"Learn to host a VNC server with DOSBox in Azure Container Apps, enabling access to legacy applications in a modern environment.","date":"2025-08-03T23:33:09.321Z"},"unlisted":false,"nextItem":{"title":"Bulk Link Partner Admin Link (PAL) to Azure Tenants","permalink":"/azure/partner-admin-link-tool"}}')}}]);