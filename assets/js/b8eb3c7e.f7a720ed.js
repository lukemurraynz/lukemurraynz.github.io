"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[59525],{56306:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=t(85893),r=t(11151);const a={title:"Deploying Large Language Models on AKS with Kaito",metaDescription:"Learn how to deploy large language models (or Small Language Models) on Azure Kubernetes Service (AKS) using Kaito, an operator that automates the deployment of AI/ML inference models in a Kubernetes cluster.",description:"Deploy large language models on AKS using Kaito, an operator that simplifies the deployment of AI/ML inference models in a Kubernetes cluster.",date:new Date("2024-05-08T21:49:34.752Z"),tags:["Azure"],categories:["Azure"],authors:["Luke"],header:"kaito-arch.png",slug:"azure/run-local-llm-aks",keywords:["azure","large language models","AKS","Kaito","Kubernetes","operator","AI/ML inference models","GPU-enabled nodes","deployment","model provisioning","model configuration","model tuning","model deployment","model management","open-source LLMs","cost reduction","data security","AI Shared responsibility model","AKS cluster","quota","GPU compute nodes","Azure CLI","GitHub Codespace","infrastructure as code","Terraform","Azure Developer CLI","deployment","AKS cluster deployment","region","environment configuration","deployment completion","microservices","Pets app","AKS demos","experiments","polyglot architecture","event-driven design","open-source back-end services","RabbitMQ","MongoDB","OpenAI's GPT-3 models","generative text","graphics creation","MongoDB instance","RabbitMQ","prerequisites","Azure subscription","GPU compute workload","Standard NCSv3","Azure Developer CLI","Terraform","AKS cluster deployment"]},i=void 0,s={permalink:"/azure/run-local-llm-aks",source:"@site/blog/2024-05-09-run-local-slm-aks/index.mdx",title:"Deploying Large Language Models on AKS with Kaito",description:"Deploy large language models on AKS using Kaito, an operator that simplifies the deployment of AI/ML inference models in a Kubernetes cluster.",date:"2024-05-08T21:49:34.752Z",tags:[{label:"Azure",permalink:"/tags/azure"}],readingTime:15.765,hasTruncateMarker:!0,authors:[{name:"Luke Murray",title:"Author",url:"https://luke.geek.nz",imageURL:"https://luke.geek.nz/img/logo.png",key:"Luke"}],frontMatter:{title:"Deploying Large Language Models on AKS with Kaito",metaDescription:"Learn how to deploy large language models (or Small Language Models) on Azure Kubernetes Service (AKS) using Kaito, an operator that automates the deployment of AI/ML inference models in a Kubernetes cluster.",description:"Deploy large language models on AKS using Kaito, an operator that simplifies the deployment of AI/ML inference models in a Kubernetes cluster.",date:"2024-05-08T21:49:34.752Z",tags:["Azure"],categories:["Azure"],authors:["Luke"],header:"kaito-arch.png",slug:"azure/run-local-llm-aks",keywords:["azure","large language models","AKS","Kaito","Kubernetes","operator","AI/ML inference models","GPU-enabled nodes","deployment","model provisioning","model configuration","model tuning","model deployment","model management","open-source LLMs","cost reduction","data security","AI Shared responsibility model","AKS cluster","quota","GPU compute nodes","Azure CLI","GitHub Codespace","infrastructure as code","Terraform","Azure Developer CLI","deployment","AKS cluster deployment","region","environment configuration","deployment completion","microservices","Pets app","AKS demos","experiments","polyglot architecture","event-driven design","open-source back-end services","RabbitMQ","MongoDB","OpenAI's GPT-3 models","generative text","graphics creation","MongoDB instance","RabbitMQ","prerequisites","Azure subscription","GPU compute workload","Standard NCSv3","Azure Developer CLI","Terraform","AKS cluster deployment"]},unlisted:!1,nextItem:{title:"Authorization Permission Mismatch error with Azure Storage",permalink:"/azure/authorization-permission-mismatch-error-azure-storage"}},l={authorsImageUrls:[void 0]},u=[];function c(e){const o={a:"a",blockquote:"blockquote",em:"em",p:"p",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(o.p,{children:["Today, we are going to look at deploying a large language model ",(0,n.jsx)(o.em,{children:"(LLM)"})," directly into your AKS ",(0,n.jsx)(o.em,{children:"(Azure Kubernetes Service)"})," cluster, running on GPU-enabled nodes, using ",(0,n.jsxs)(o.a,{href:"https://github.com/Azure/kaito",children:["Kaito ",(0,n.jsx)(o.em,{children:"(Kubernetes AI Toolchain Operator)"})]}),"."]}),"\n",(0,n.jsxs)(o.blockquote,{children:["\n",(0,n.jsx)(o.p,{children:"KAITO is an open-source operator that transforms how you deploy AI models on Kubernetes. It streamlines the process, automating critical tasks like infrastructure provisioning and resource optimization. It intelligently selects the optimal hardware configuration for your specific model, using available CPU and GPU resources on AKS. KAITO eliminates the manual setup complexities, accelerating your deployment time and reducing associated costs."}),"\n"]})]})}function d(e={}){const{wrapper:o}={...(0,r.a)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},11151:(e,o,t)=>{t.d(o,{Z:()=>s,a:()=>i});var n=t(67294);const r={},a=n.createContext(r);function i(e){const o=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:o},e.children)}}}]);