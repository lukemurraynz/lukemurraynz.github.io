"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[87376],{17228:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var o=t(99741),r=t(74848),a=t(28453);const s={title:"Using the Azure Naming Tool API to name your Bicep resources",metaDescription:"Deployment of Azure Naming Tool into an Azure WebApp and testing the API.",date:new Date("2024-01-16T03:44:02.021Z"),tags:["Azure"],categories:["Azure"],authors:["Luke"],header:{teaser:"/uploads/azurenamingtoollogo.png"},slug:"azure/azure-naming-tool-api-bicep-resources",keywords:["api","azure","cloudnative","NamingTool","WebApp","bicep"],description:"Deployment of Azure Naming Tool into an Azure WebApp and testing the API."},i=void 0,c={authorsImageUrls:[void 0]},u=[{value:"Overview",id:"overview",level:2},{value:"Scripts",id:"scripts",level:2},{value:"Deployment",id:"deployment",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/mspnp/AzureNamingTool",children:"Azure Naming Tool"})," was created to help administrators define and manage their naming conventions for Azure resources while providing a simple interface for users to generate a compliant name.\nThe tool was developed using a naming pattern based on ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/naming-and-tagging?WT.mc_id=AZ-MVP-5004796",children:"Microsoft's best practices"}),". Once an administrator has defined the organizational components, users can use the tool to generate a name for the desired Azure resource."]}),"\n",(0,r.jsx)(n.p,{children:"Today, we will use the Azure Naming Tool API to generate a name for our storage account bicep resource."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Azure Naming Tool Logo",src:t(32546).A+"",title:"Azure Naming Tool Logo",width:"750",height:"450"})}),"\n","\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["I had a previous Blog article for ",(0,r.jsx)(n.a,{href:"https://luke.geek.nz/2022/07/11/deploy-azure-naming-tool-into-an-azure-webapp-as-a-container/",children:"Deploying Azure Naming Tool into an Azure WebApp as a container"})," this was a previous version, as of June 2022, but check it out, if you run into issues with your deployment. Today, we will deploy the latest version at the time of this article straight to a WebApp."]})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["The process is reasonably well documented directly on ",(0,r.jsx)(n.a,{href:"https://github.com/mspnp/AzureNamingTool/wiki",children:"Wiki of GitHub repository"})," for Azure Naming Tool, and it is what I followed, but to trigger the Publishing Profile button (if it greyed out) in the Azure Portal, for a brand new web app, I was able to go into Configuration/General Settings and Turn Basic Auth Publishing Off, Save, then back on, Save, and the button was enabled."]})}),"\n",(0,r.jsx)(n.p,{children:"So, now we have our Azure Naming Tool set up and deployed; we can test it out by using the API to generate a name for our storage account bicep resource."}),"\n",(0,r.jsx)(n.h2,{id:"scripts",children:"Scripts"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"To do this, we will have three scripts:"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"main.bicep"})," - This is our main bicep file, which will deploy our storage account and use the Azure Naming Tool API to generate a name for it."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"command.ps1"})," - This will be our PowerShell script, which will call the Azure Naming Tool API, generate a name for our storage account, and then trigger the Bicep deployment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Request-ResourceName.ps1"})," - This is our PowerShell function that will call the Azure Naming Tool API and return the generated name value."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Command.ps1 will call the other scripts."}),"\n",(0,r.jsx)(n.p,{children:"So let us take a look at those:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",metastring:'title="command.ps1"',children:"# Check if the Az.Accounts module is installed\n$module = Get-Module -ListAvailable -Name Az.Accounts\n\n# If the module is not installed, install it\nif ($null -eq $module) {\n    Install-Module -Name Az.Accounts -Scope CurrentUser -Force\n}\n\n# Check if the Az.Resources module is installed\n$module = Get-Module -ListAvailable -Name Az.Resources\n\n# If the module is not installed, install it\nif ($null -eq $module) {\n    Install-Module -Name Az.Resources -Scope CurrentUser -Force\n}\n\n# Connect-AzAccount -UseDeviceAuthentication\n\n# Import the Request-ResourceName function\n. .\\Request-ResourceName.ps1\n\n# Define the API key and the Azure Naming Tool site name\n$API = ''\n$AzNamingToolSiteName = ''\n\n# Call the function with some example parameters\n$storageAccountName = Request-ResourceName -API $API -AzNamingToolSiteName $AzNamingToolSiteName -resourceEnvironment 'dev'  -resourceInstance '1' -resourceLocation 'aue'  -resourceType 'st' -createdBy 'me' -resourceProjAppSvc 'spa' | Select-Object -ExpandProperty resourceName\n\n# Define the resource group and location\n$resourceGroupName = 'stgaccount_rg'\n\n# Create the resource group if it doesn't exist\n$resourceGroup = Get-AzResourceGroup -Name $resourceGroupName -ErrorAction SilentlyContinue\nif ($null -eq $resourceGroup) {\n    New-AzResourceGroup -Name $resourceGroupName -Location 'australiaeast'\n}\n\n# Deploy the Bicep file\nNew-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateFile './main.bicep' -storageAccountName $storageAccountName\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bicep",metastring:'title="main.bicep"',children:"param storageAccountName string \nparam location string = resourceGroup().location\n\nresource storageacc 'Microsoft.Storage/storageAccounts@2023-01-01' = {\n  name: storageAccountName\n  location: location\n  properties: {\n    accessTier: 'Hot'\n  }\n  sku: {\n  \n    name:  'Standard_LRS'\n  }\n  kind:  'BlobStorage'\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",metastring:'title="Request-ResourceName.ps1"',children:"\n# Define the function that requests a resource name\nfunction Request-ResourceName {\n    # Define the parameters that the function accepts\n    param (\n        [Parameter(Mandatory=$true)] [string] $API,  # The API key\n        [Parameter(Mandatory=$true)] [string] $AzNamingToolSiteName,  # The Azure Naming Tool site name\n        [Parameter(Mandatory=$true)]\n        [ValidateSet('dev', 'prd', 'sbx', 'shd', 'stg', 'tst', 'uat')]\n        [ValidateLength(1,5)]\n        [string] $resourceEnvironment,  # The environment of the resource\n        [Parameter(Mandatory=$false)] [string] $resourceFunction,  # The function of the resource\n        [Parameter(Mandatory=$true)] [string] $resourceInstance,  # The instance of the resource\n        [Parameter(Mandatory=$true)]\n        [ValidateSet('aue', 'aus', 'nzn', '\tusw')]\n        [ValidateLength(1,10)]\n        [string] $resourceLocation,  # The location of the resource\n        [Parameter(Mandatory=$false)] [string] $resourceOrg,  # The organization of the resource\n        [Parameter(Mandatory=$false, HelpMessage=\"The shortcode of the project. This needs to match an existing Project in Azure Naming Tool.\")]\n        [ValidateLength(1,3)]\n        [string] $resourceProjAppSvc,  # The project or application service of the resource\n        [Parameter(Mandatory=$true)] [string] $resourceType,  # The type of the resource\n        [Parameter(Mandatory=$false)]\n        [ValidateLength(1,5)]\n        [string] $resourceUnitDept,  # The unit or department of the resource\n        [Parameter(Mandatory=$false)] [Hashtable] $customComponents,  # Any custom components for the resource\n        [Parameter(Mandatory=$false)] [string] $createdBy  # The creator of the resource\n    )\n\n    # Define the headers for the API request\n    $headers = @{\n        'accept' = '*/*'\n        'APIKey' = $API\n        'Content-Type' = 'application/json'\n    }\n\n    # Define the body of the API request\n    $body = @{\n        'resourceEnvironment' = $resourceEnvironment\n        'resourceFunction' = $resourceFunction\n        'resourceInstance' = $resourceInstance\n        'resourceLocation' = $resourceLocation\n        'resourceOrg' = $resourceOrg\n        'resourceProjAppSvc' = $resourceProjAppSvc\n        'resourceType' = $resourceType\n        'resourceUnitDept' = $resourceUnitDept\n        'customComponents' = $customComponents\n        'createdBy' = $createdBy\n    } | ConvertTo-Json -Depth 6  # Convert the body to JSON format\n\n    # Send the API request and store the response\n    try {\n        $response = Invoke-RestMethod -Uri \"https://$AzNamingToolSiteName.azurewebsites.net/api/ResourceNamingRequests/RequestName\" -Method Post -Headers $headers -Body $body\n        if ($null -eq $response) {\n            Write-Host \"The API returned a successful response with no body.\"\n        } else {\n            Write-Host \"The API returned a successful response, with the name generated as: $($response.resourceName)\"\n        }\n    } catch {\n        Write-Host \"An error occurred: $_\"\n    }\n    # Return the response\n    return $response\n}\n\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,r.jsx)(n.p,{children:"Now that we have the scripts, it's time to run it. I am going to run this from a GitHub Codespace that already has the latest version of PowerShell and Bicep installed. I have whitelisted the IP of the Codespace to allow it to access the Azure Naming Tool WebApp."}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"Your Azure Naming Tool configuration is key! It needs to align with your organisational needs, naming conventions, projects and departments where necessary. Different resource types, will require different configurations, so make sure you plan this out, the Azure Naming Tool reference page can be key to review for successful name generation."})}),"\n",(0,r.jsx)(n.p,{children:"First, we will need the API Key, so within the Azure Naming Tool, click on Admin, enter your password and Copy the Full Access API Key. This key is needed as the generated API resource name is a POST operation."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Copy Azure Naming Tool API",src:t(40240).A+"",title:"Azure Naming Tool API Key",width:"1969",height:"944"})}),"\n",(0,r.jsxs)(n.p,{children:["You will also need the name of your Azure Naming Tool WebApp, the Request-ResourceName script does make an assumption that this is an Azure hosted website ",(0,r.jsxs)(n.em,{children:["(ie ",(0,r.jsx)(n.a,{href:"https://aznamingtoolgeeknz.azurewebsites.net/",children:"https://aznamingtoolgeeknz.azurewebsites.net/"}),")"]}),". If you are hosting it elsewhere, you will need to update the script to reflect the domain name."]}),"\n",(0,r.jsx)(n.p,{children:"Enter the API and WebApp name into the command.ps1 script, these are parameters for the script, along with resourceType, resourceInstance, resourceLocation, etc. Different resource types and configurations will require different parameters."}),"\n",(0,r.jsx)(n.p,{children:"Now it's time to create our Storage Account using a Name generated from the Azure Naming Tool."}),"\n",(0,r.jsx)(n.p,{children:"The command script will trigger a REST API call to Azure Naming Tool to generate a name for our storage account. Then we will use that name as a parameter for the storageAccountName Bicep deployment."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Generate Name using Azure Naming Tool API",src:t(6031).A+"",title:"Azure Naming Tool generate name",width:"1903",height:"944"})}),"\n",(0,r.jsx)(n.p,{children:"Our Storage account is now created:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Azure Storage account created",src:t(98108).A+"",title:"Created Azure Storage account",width:"1883",height:"453"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},40240:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/AzureNamingTool_CopyAPIKey-b49125659c11a5b15d570d61c92f364a.gif"},6031:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/AzureNamingTool_RunAPIGenerateName-b607292f529c299be8d77ac10e3db4bd.gif"},98108:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/Created_StorageAccount-909a11e3549734d09f4b34dc798ff8c5.png"},32546:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/azurenamingtoollogo-988ade636a1de804bd46948462c4e980.png"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(96540);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}},99741:e=>{e.exports=JSON.parse('{"permalink":"/azure/azure-naming-tool-api-bicep-resources","source":"@site/blog/2024-01-16-azure-naming-tool-api-bicep/index.mdx","title":"Using the Azure Naming Tool API to name your Bicep resources","description":"Deployment of Azure Naming Tool into an Azure WebApp and testing the API.","date":"2024-01-16T03:44:02.021Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":6.03,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Using the Azure Naming Tool API to name your Bicep resources","metaDescription":"Deployment of Azure Naming Tool into an Azure WebApp and testing the API.","date":"2024-01-16T03:44:02.021Z","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"header":{"teaser":"/uploads/azurenamingtoollogo.png"},"slug":"azure/azure-naming-tool-api-bicep-resources","keywords":["api","azure","cloudnative","NamingTool","WebApp","bicep"],"description":"Deployment of Azure Naming Tool into an Azure WebApp and testing the API."},"unlisted":false,"prevItem":{"title":"Accessing KeyVault from Azure DevOps","permalink":"/azure/accessing-keyvault-azure-devops"},"nextItem":{"title":"Add existing Azure resource to a Deployment Stack","permalink":"/azure/existing-resource-deploymentstack"}}')}}]);