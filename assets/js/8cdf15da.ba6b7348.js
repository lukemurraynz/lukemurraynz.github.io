"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[19121],{67679:(e,o,i)=>{i.r(o),i.d(o,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});var r=i(3165),s=i(74848),n=i(28453);const t={title:"Pre-commit Hooks in GitHub Codespaces for Terraform IaC",metaDescription:"Learn how to set up pre-commit hooks in GitHub Codespaces for Terraform Infrastructure as Code (IaC) development.",date:new Date("2025-01-07T08:06:54.566Z"),tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"misc/precommit-hooks-codespaces-terraform-iac",keywords:["azure","codespace","github","pre-commit","terraform","infrastructure as code"],description:"Learn how to set up pre-commit hooks in GitHub Codespaces for Terraform Infrastructure as Code (IaC) development."},c=void 0,a={authorsImageUrls:[void 0]},d=[];function l(e){const o={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(o.p,{children:["Pre-commit hooks are automated scripts or checks running before developers commit code to a repository. They are particularly useful in the context of infrastructure, such as code ",(0,s.jsx)(o.em,{children:"(IaC)"})," development, when working with Terraform."]}),"\n",(0,s.jsx)(o.p,{children:"These hooks serve as an early defense against common issues, ensuring code quality and consistency before changes are committed to version control."}),"\n",(0,s.jsx)(o.p,{children:"Today, we are going to discuss precommit with GitHub Codespaces."}),"\n","\n",(0,s.jsxs)(o.admonition,{type:"info",children:[(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.a,{href:"https://pre-commit.com/",children:"Pre-commit hooks"})," offer several advantages in the IaC development lifecycle:"]}),(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"Early Error Detection: They catch syntax errors, formatting issues, and potential security vulnerabilities before code is committed."}),"\n",(0,s.jsx)(o.li,{children:"Consistency: Hooks enforces coding standards and best practices across the development team."}),"\n",(0,s.jsx)(o.li,{children:"Time-saving: By automating routine checks, pre-commit hooks reduce the need for manual review and minimize the likelihood of failed CI/CD pipelines."}),"\n",(0,s.jsx)(o.li,{children:"Security: They can identify potential security risks in infrastructure code early in the development process."}),"\n"]}),(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pre-commit hooks",src:i(77947).A+"",width:"720",height:"321"})}),(0,s.jsx)(o.p,{children:(0,s.jsxs)(o.em,{children:["(Image from ",(0,s.jsx)(o.a,{href:"https://azure.github.io/AKS-DevSecOps-Workshop/",children:"AKS DevSecOps Workshop"}),")"]})}),(0,s.jsxs)(o.p,{children:["Pre-commits work well in the Inner Loop of the Developer/Cloud Engineer workflow ",(0,s.jsx)(o.em,{children:"(for the duration of this article when I use the word developer, I am meaning anyone who writes IaC code)"}),". They can be lightweight and run quickly, providing immediate feedback to developers as they work on their code. This feedback loop helps developers address issues early, leading to higher-quality code and faster development cycles, before the code hits any peer review or remote code source system (such as DevOps or GitHub repositories)_."]}),(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Inner Loop of Developer Workflow",src:i(29411).A+"",width:"1984",height:"794"})})]}),"\n",(0,s.jsxs)(o.admonition,{type:"warning",children:[(0,s.jsx)(o.p,{children:"While pre-commit hooks can be valuable tools for maintaining code quality, there are several concerns and potential drawbacks to be aware of when implementing them. The use of GitHub Codespaces can help with some of the drawbacks, especially around consistency and setup, however consider the tradeoffs of what pre-commit hooks you want and how they may impact your development workflow."}),(0,s.jsx)(o.p,{children:"Some potential drawbacks include:"}),(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"Pre-commit hooks can significantly slow down the development process, especially if they run extensive checks or tests"}),"\n",(0,s.jsx)(o.li,{children:"Frequent, time-consuming checks can break a developer's focus and impede productivity"}),"\n",(0,s.jsx)(o.li,{children:"Overly restrictive pre-commit hooks may be seen as a lack of trust in developers' abilities and judgment"}),"\n",(0,s.jsx)(o.li,{children:"Strict pre-commit checks might discourage developers from experimenting or pushing work-in-progress code to their branches"}),"\n",(0,s.jsx)(o.li,{children:"Developers might be tempted to bypass hooks using git commit flags, defeating the purpose of the checks"}),"\n"]}),(0,s.jsxs)(o.p,{children:["There's a delicate balance between comprehensive checks and maintaining a fast, frictionless commit process. Not all checks need to be in pre-commit hooks; some can be deferred to CI/CD pipelines or pre-push hooks, and because of the individual nature of having the pre-commit setup for each developer and the developer able to force the commit ",(0,s.jsx)(o.em,{children:"(ignoring the pre-commit checks)"})," it is important to have a good culture around the use of pre-commit hooks, and any important checks need to be implemented in a CI/CD pipeline, for consistency."]})]}),"\n",(0,s.jsx)(o.p,{children:"So, let us get started with setting up pre-commit hooks in GitHub Codespaces. The same premise can also be applied outside of a Codespace, but for this article, we will focus on a Codespace."}),"\n",(0,s.jsxs)(o.p,{children:["The guts of this is the ",(0,s.jsx)(o.a,{href:"https://pre-commit.com/",children:"pre-commit framework"}),", a Python package that manages pre-commit hooks for you. It is a framework for managing and maintaining multi-language pre-commit hooks. The pre-commit hooks are run against the files that are staged for commit, and if any of the hooks fail, the commit is rejected."]}),"\n",(0,s.jsxs)(o.blockquote,{children:["\n",(0,s.jsx)(o.p,{children:"Git hook scripts are useful for identifying simple issues before submission to code review. We run our hooks on every commit to automatically point out issues in code, such as missing semicolons, trailing whitespace, and debug statements. Pointing these issues out before code review allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks."}),"\n"]}),"\n",(0,s.jsx)(o.p,{children:"For the Codespace, we will add the pre-commit framework to the Codespace, then add a script to initialize the pre-commit hooks, then configure the pre-commit hooks to run the checks we want."}),"\n",(0,s.jsx)(o.p,{children:"Let's add the pre-commit framework to the Codespace devcontainer.json."}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-json",children:'"features": {\n //Add pre-commit\n    "ghcr.io/prulloac/devcontainer-features/pre-commit:1.0.3": {},\n    },\n'})}),"\n",(0,s.jsx)(o.p,{children:"Once added, we need to add a postCreateCommand to initialize the pre-commit framework, like so:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-json",children:'"postCreateCommand": "pre-commit install",\n'})}),"\n",(0,s.jsx)(o.p,{children:"This will run after the GitHub Codespace has been created and running."}),"\n",(0,s.jsx)(o.p,{children:"So, an example for our Terraform IaC would look like this:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-json",metastring:'title=".devcontainer/devcontainer.json"',children:'  // "features" section allows adding and configuring predefined features or tools in the development container.\n  "features": {\n    // Adds and configures the Azure CLI with Bicep and Python installation options.\n    "ghcr.io/devcontainers/features/azure-cli:latest": {\n      "installBicep": false, //  Bicep installation.\n      "installUsingPython": true, // Installs using Python.\n      "version": "latest" // Specifies the version of the Azure CLI to install.\n    },\n    // Adds PowerShell to the container.\n    "ghcr.io/devcontainers/features/powershell:latest": {\n      "version": "latest" // Specifies the version of PowerShell to install.\n    },\n     //Add pre-commit\n    "ghcr.io/prulloac/devcontainer-features/pre-commit:1.0.3": {},\n    // Adds and configures Terraform with specific version, TFLint, and Terragrunt.\n    "ghcr.io/devcontainers/features/terraform:1": {\n      "version": "latest", // Specifies the version of Terraform to install.\n      "tflint": "latest", // Specifies the version of TFLint to install.\n      "terragrunt": "latest" // Specifies the version of Terragrunt to install.\n    }\n  },\n    "postCreateCommand": "pre-commit install",\n'})}),"\n",(0,s.jsx)(o.admonition,{type:"tip",children:(0,s.jsxs)(o.p,{children:["You can view a version of the devcontainer.json file ",(0,s.jsx)(o.a,{href:"https://github.com/lukemurraynz/Codespace_IaC_Coding/blob/main/.devcontainer/devcontainer.json",children:"here"}),". My ",(0,s.jsx)(o.a,{href:"https://github.com/lukemurraynz/Codespace_IaC_Coding",children:"lmurraynz/Codespace_IaC_Coding"})," repository has a devcontainer.json file that has the pre-commit framework added in. The intention is that you can take this repository as a template and then modify and remove it as you need to."]})}),"\n",(0,s.jsx)(o.p,{children:"Once the Codespace has been created, you can then add a .pre-commit-config.yaml file to the root of your repository. This file will contain the configuration for the pre-commit hooks you want to run."}),"\n",(0,s.jsx)(o.p,{children:"An example of a .pre-commit-config.yaml file for Terraform would look like this:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-yaml",metastring:'title=".pre-commit-config.yaml"',children:"default_stages: [pre-commit]\nrepos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v5.0.0\n  hooks:\n  - id: trailing-whitespace\n  - id: end-of-file-fixer\n  - id: check-yaml\n  - id: check-added-large-files\n  - id: check-case-conflict\n  - id: check-merge-conflict\n- repo: https://github.com/antonbabenko/pre-commit-terraform\n  rev: v1.96.3\n  hooks:\n    - id: terraform_fmt\n      args:\n      - --args=-recursive\n      exclude: '.*/\\.terragrunt-cache'\n    - id: terraform_validate\n    - id: terraform_tflint\n    - id: terraform_trivy\n    - id: terraform_docs\n      args:\n       - --hook-config=--add-to-existing-file=true     # Boolean. true or false\n       - --hook-config=--create-file-if-not-exist=true # Boolean. true or false\n       - --args=--output-mode=replace\n    - id: tfupdate\n      name: Autoupdate Terraform versions\n      args:\n       - --args=provider azurerm # Will be pined to latest version\n- repo: https://github.com/bridgecrewio/checkov.git\n  rev: '3.2.346' # change to tag or sha\n  hooks:\n  - id: checkov\n    verbose: true\n    args: ['--quiet', '--compact', '--soft-fail']\n"})}),"\n",(0,s.jsx)(o.p,{children:"Here's a breakdown of what each part does:"}),"\n",(0,s.jsxs)(o.ol,{children:["\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:(0,s.jsx)(o.code,{children:"default_stages: [pre-commit]"})}),": Specifies that the hooks should run at the ",(0,s.jsx)(o.code,{children:"pre-commit"})," stage."]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:(0,s.jsx)(o.code,{children:"repos"})}),": Lists repositories containing pre-commit hooks to be used."]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"First repository"})," (",(0,s.jsx)(o.code,{children:"https://github.com/pre-commit/pre-commit-hooks"}),"):"]}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:(0,s.jsx)(o.code,{children:"rev: v5.0.0"})}),": Specifies the version of the repository."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:(0,s.jsx)(o.code,{children:"hooks"})}),": Lists the hooks to be used from this repository:","\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"trailing-whitespace"}),": Removes trailing whitespace."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"end-of-file-fixer"}),": Ensures files end with a newline."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"check-yaml"}),": Checks YAML files for syntax errors."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"check-added-large-files"}),": Prevents large files from being added."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"check-case-conflict"}),": Checks for case conflicts in filenames."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"check-merge-conflict"}),": Checks for unresolved merge conflicts."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Second repository"})," (",(0,s.jsx)(o.code,{children:"https://github.com/antonbabenko/pre-commit-terraform"}),"):"]}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:(0,s.jsx)(o.code,{children:"rev: v1.96.3"})}),": Specifies the version of the repository."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:(0,s.jsx)(o.code,{children:"hooks"})}),": Lists the hooks to be used from this repository:","\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"terraform_fmt"}),": Formats Terraform files.","\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"args"}),": Specifies arguments for the hook."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"exclude"}),": Excludes certain files from the hook."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"terraform_validate"}),": Validates Terraform files."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"terraform_tflint"}),": Lints Terraform files."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"terraform_trivy"}),": Scans Terraform files for vulnerabilities."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"terraform_docs"}),": Generates documentation for Terraform files.","\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"args"}),": Specifies arguments for the hook."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"tfupdate"}),": Updates Terraform provider versions.","\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"name"}),": Provides a name for the hook."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"args"}),": Specifies arguments for the hook."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Third repository"})," (",(0,s.jsx)(o.code,{children:"https://github.com/bridgecrewio/checkov.git"}),"):"]}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:(0,s.jsx)(o.code,{children:"rev: '3.2.346'"})}),": Specifies the version of the repository."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:(0,s.jsx)(o.code,{children:"hooks"})}),": Lists the hooks to be used from this repository:","\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"checkov"}),": Runs Checkov to scan for security issues in infrastructure as code.","\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"verbose"}),": Enables verbose output."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"args"}),": Specifies arguments for the hook."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(o.p,{children:"This configuration ensures that various checks and fixes are automatically applied to the codebase before commits are made, helping to maintain code quality and security."}),"\n",(0,s.jsx)(o.p,{children:"So, let's spin up our Codespace and see the pre-commit hooks in action."}),"\n",(0,s.jsx)(o.p,{children:"The first time you run this, it will take a while as it will download the pre-commit hooks and install them. Be mindful of this if you are running this in a new Codespace environment."}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{alt:"Pre-commit install",src:i(6367).A+"",width:"1901",height:"1032"})}),"\n",(0,s.jsx)(o.p,{children:"As you can see from the pre-commit output, I am missing some dependencies installed, i.e., Terraform docs, but we can see Terraform format ran, the trailing whitespace check ran and fixed the issue, and tflint ran and came back with some issues, such as missing provider versions, and checkov ran a security check, which came back with some failed checks, such as Public access enabled and latest TLS version not set."}),"\n",(0,s.jsx)(o.p,{children:"Hopefully, you can see the power of the pre-commit, and as these failed, nothing was committed to the repository, so I can fix these issues before I commit the code."}),"\n",(0,s.jsxs)(o.admonition,{type:"info",children:[(0,s.jsx)(o.p,{children:"If needed, we can skip the pre-commit checks and force-push the changes through with the following command:"}),(0,s.jsx)(o.p,{children:"git push --no-verify"}),(0,s.jsxs)(o.p,{children:["This will bypass the pre-commit checks and force the commit through. There is a ",(0,s.jsx)(o.a,{href:"https://marketplace.visualstudio.com/items?itemName=DevEscalus.git-push-no-verify",children:"Visual Studio Code extension - Git push(no verify)\n"})," as well, which adds a noverify button to the commit dialog, so you can bypass the pre-commit checks if needed."]})]}),"\n",(0,s.jsxs)(o.p,{children:["Hopefully, this will give you a great starting block for adding pre-commit hooks to your Codespace and workflow and help with secure and reliable IaC development. You can find a list of common prehooks here: ",(0,s.jsx)(o.a,{href:"https://pre-commit.com/hooks.html",children:"featured hooks\n"}),", and if your game - you can create your own and find other hooks people have created - such as this Azure Bicep ",(0,s.jsx)(o.a,{href:"https://github.com/Azure4DevOps/check-azure-bicep",children:"Azure4DevOps/check-azure-bicep"})," one."]})]})}function h(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},6367:(e,o,i)=>{i.d(o,{A:()=>r});const r=i.p+"assets/images/Precommit_Codespace_Terraform_Run-96daf6e0895ddb3c87b20c0fbd5b5ac5.gif"},29411:(e,o,i)=>{i.d(o,{A:()=>r});const r=i.p+"assets/images/devinnerouterloop-b08a99eb9b7df562d4c631e2244a1a8c.png"},77947:(e,o,i)=>{i.d(o,{A:()=>r});const r=i.p+"assets/images/pre-commit-hook-flow-7e60248cd1d61f0724b7554c8336e15e.png"},28453:(e,o,i)=>{i.d(o,{R:()=>t,x:()=>c});var r=i(96540);const s={},n=r.createContext(s);function t(e){const o=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(n.Provider,{value:o},e.children)}},3165:e=>{e.exports=JSON.parse('{"permalink":"/misc/precommit-hooks-codespaces-terraform-iac","source":"@site/blog/2025-01-07-precommit-codespace/index.mdx","title":"Pre-commit Hooks in GitHub Codespaces for Terraform IaC","description":"Learn how to set up pre-commit hooks in GitHub Codespaces for Terraform Infrastructure as Code (IaC) development.","date":"2025-01-07T08:06:54.566Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":8.035,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Pre-commit Hooks in GitHub Codespaces for Terraform IaC","metaDescription":"Learn how to set up pre-commit hooks in GitHub Codespaces for Terraform Infrastructure as Code (IaC) development.","date":"2025-01-07T08:06:54.566Z","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"slug":"misc/precommit-hooks-codespaces-terraform-iac","keywords":["azure","codespace","github","pre-commit","terraform","infrastructure as code"],"description":"Learn how to set up pre-commit hooks in GitHub Codespaces for Terraform Infrastructure as Code (IaC) development."},"unlisted":false,"nextItem":{"title":"Deploying Azure Managed Redis with Bicep","permalink":"/azure/deploying-azure-managed-redis-with-bicep"}}')}}]);