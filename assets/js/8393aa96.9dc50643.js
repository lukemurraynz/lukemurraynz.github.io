"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[8727],{77111:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var t=i(47650),s=i(74848),o=i(28453);const r={title:"Enterprise Policy as Code with Azure DevOps",metaDescription:"Enterprise Azure Policy as Code or EPAC for short comprises a number of scripts which can be used in CI/CD based system or a semi-automated use to deploy Policies, Policy Sets, Assignments, Policy Exemptions and Role Assignments. Lets take a look at its use.",date:new Date("2024-02-18T23:25:11.692Z"),tags:["Azure"],categories:["Azure"],authors:["Luke"],header:{teaser:"BlogHeading_EPAC_ADO.png"},slug:"azure/enterprise-policy-code-azure-devops",keywords:["azure","policy","azurepolicy","security","iac"],description:"Enterprise Azure Policy as Code, or EPAC for short, comprises a number of scripts which can be used in a CI/CD-based system or a semi-automated use to deploy Policies, Policy Sets, Assignments, Policy Exemptions and Role Assignments. Let us take a look at its use."},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"What is Enterprise Azure Policy as Code?",id:"what-is-enterprise-azure-policy-as-code",level:2},{value:"Why would you use Enterprise Azure Policy as Code?",id:"why-would-you-use-enterprise-azure-policy-as-code",level:2},{value:"How do you use Enterprise Azure Policy as Code?",id:"how-do-you-use-enterprise-azure-policy-as-code",level:2},{value:"Step 1: Import existing policies",id:"step-1-import-existing-policies",level:3},{value:"Step 2: Configure Azure DevOps",id:"step-2-configure-azure-devops",level:3},{value:"Step 3: Run the Pipeline",id:"step-3-run-the-pipeline",level:3},{value:"Policy configuration",id:"policy-configuration",level:2},{value:"Change assignment scope",id:"change-assignment-scope",level:3},{value:"Reference",id:"reference",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Enterprise Azure Policy as Code (EPAC) comprises a number of scripts which can be used in a CI/CD-based system or a semi-automated use to deploy Azure Policies, Policy Sets, Assignments, Policy Exemptions and Role Assignments! This is a great way to ensure that your Azure environment complies with your company's policies and standards, so let us look at it!"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Blog Heading - EPAC ADO",src:i(27443).A+"",width:"1200",height:"628"})}),"\n","\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://azure.github.io/enterprise-azure-policy-as-code/",children:"Enterprise Azure Policy as Code (EPAC)"})," allows you to define and deploy your Azure policies and exemptions as code. This is a great way to ensure consistency of one or more Azure environments, including managing your exemptions in a way that is auditable and a way that can be integrated into CI/CD pull request approval processes."]}),"\n",(0,s.jsx)(n.p,{children:"So, let's delve a little further into it."}),"\n",(0,s.jsx)(n.h2,{id:"what-is-enterprise-azure-policy-as-code",children:"What is Enterprise Azure Policy as Code?"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"Enterprise Azure Policy as Code, or EPAC for short, comprises a number of scripts which can be used in a CI/CD-based system or a semi-automated use to deploy Policies, Policy Sets, Assignments, Policy Exceptions and Role Assignments."}),(0,s.jsx)(n.p,{children:"Main features include:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Multi-tenant/environment policy deployment"}),"\n",(0,s.jsx)(n.li,{children:"Easy CI/CD Integration"}),"\n",(0,s.jsx)(n.li,{children:"Extract existing policy objects from an environment"}),"\n",(0,s.jsx)(n.li,{children:"Support JSON and CSV inputs for large, complex policies"}),"\n",(0,s.jsx)(n.li,{children:"PowerShell Module"}),"\n",(0,s.jsx)(n.li,{children:"Integration with Azure Landing Zone recommended policies"}),"\n",(0,s.jsx)(n.li,{children:"Starter Kit with examples"}),"\n",(0,s.jsx)(n.li,{children:"Schema to provide Intellisense for VS Code development"}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["Enterprise Policy as Code, runs primarily on PowerShell scripts, at the time of writing, there is 114 PowerShell scripts that make up this solution ",(0,s.jsx)(n.em,{children:"(not all are in use for day-to-day operations)"}),", from the actual deployment to the plan, importing existing policies and initiatives, creating GitHub or Azure DevOps issues, for policy remediation tasks and even importing Azure Landing Zone policies into the solution, this solution is jam-packed with an ever-expanding toolset."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["It is worth noting that although this solution was designed and implemented by Microsoft employees, this is an ",(0,s.jsx)(n.a,{href:"https://opensource.microsoft.com/codeofconduct/",children:"Open Source initiative"})," and is not officially supported by Microsoft, but the community is very active, and the solution is constantly being updated and improved upon. All ",(0,s.jsx)(n.a,{href:"https://github.com/Azure/enterprise-azure-policy-as-code/issues",children:"Issues"})," can be raised directly on GitHub, and if you have any queries, concerns or issues, I suggest you look here first."]})}),"\n",(0,s.jsx)(n.h2,{id:"why-would-you-use-enterprise-azure-policy-as-code",children:"Why would you use Enterprise Azure Policy as Code?"}),"\n",(0,s.jsx)(n.p,{children:"So, why would you use EPAC? Before we go into that - let's go back to basics - Azure Policy."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"What is Azure Policy",src:i(78525).A+"",width:"1680",height:"945"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/azure/governance/policy/overview?WT.mc_id=AZ-MVP-5004796",children:"Azure policies"})," are essential to Azure governance; they are the 'make it so' of the Azure environment ",(0,s.jsx)(n.em,{children:"(and beyond)"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The policies exist to help across areas such as:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Maintain regulatory compliance with industry standards"}),"\n",(0,s.jsx)(n.li,{children:"Security and performance consistencies"}),"\n",(0,s.jsx)(n.li,{children:"Enterprise-wide design principles"}),"\n",(0,s.jsx)(n.li,{children:"Controlling cost"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"But how do they do that? Let us take a look at the definitions that make them sing!"}),"\n",(0,s.jsx)(n.p,{children:"For this, we are to look at some of the key components of a definition for the 'Function apps should authenticate to Azure Container Registry using a managed identity' policy."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Azure Policy definition",src:i(62159).A+"",width:"1680",height:"945"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Metadata"}),"\n",(0,s.jsx)(n.li,{children:"Parameters"}),"\n",(0,s.jsx)(n.li,{children:"Rules"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Metadata includes items such as: DisplayName, Mode ",(0,s.jsx)(n.em,{children:"(Indexed vs All)"}),", version and categories.\nParameters give you the flexibility to adjust your policy to your environment, in this case, the policy is looking for a specific Azure Container Registry, but you could have a parameter for the resource group, the subscription, or even the identity that it uses, which can be adjusted to be unique between environments.\nRules are the actual policy; in this case, the policy is looking for a specific identity to be used to authenticate to the Azure Container Registry but will contain the type of resources that the policy will affect, the aliases or resource properties that it needs to look for to evaluate against, and even change."]}),"\n",(0,s.jsx)(n.p,{children:"So, why would you use EPAC? Imagine you have a large number of policies, a large number of environments, or even a large number of policy exemptions, managing your policies as code is a great way to manage them all in a consistent and auditable way, especially when you are working with different versions of policies, and policies deployed to different scopes as well."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Azure Policy Scopes",src:i(38276).A+"",width:"1680",height:"945"})}),"\n",(0,s.jsx)(n.h2,{id:"how-do-you-use-enterprise-azure-policy-as-code",children:"How do you use Enterprise Azure Policy as Code?"}),"\n",(0,s.jsxs)(n.p,{children:["Now that we have looked into some of the complexity of Azure policies, especially at scale. Let us take a look into how we can get going with ",(0,s.jsx)(n.a,{href:"https://azure.github.io/enterprise-azure-policy-as-code/",children:"Enterprise Policy as Code"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In this article, I am going to assume a few things:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"You have permission to deploy policies and policy assignments in your Azure environment"}),"\n",(0,s.jsxs)(n.li,{children:["You have an Azure DevOps environment (we will use Azure DevOps pipelines in this article, however there is also GitHub action workflows that can be used if you are using GitHub as well) and ",(0,s.jsx)(n.a,{href:"https://azure.github.io/enterprise-azure-policy-as-code/ci-cd-app-registrations/",children:"Service Connection configured"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["We are going to leverage the EPAC ",(0,s.jsx)(n.a,{href:"https://github.com/Azure/enterprise-azure-policy-as-code/tree/main/StarterKit",children:"StarterKit"}),", for the pipelines and scripts."]}),"\n",(0,s.jsx)(n.p,{children:"Before we get CI/CD pipelines set up, we need to do a few things locally first."}),"\n",(0,s.jsx)(n.h3,{id:"step-1-import-existing-policies",children:"Step 1: Import existing policies"}),"\n",(0,s.jsx)(n.p,{children:"So, let's import our existing policies and set up our environment! I highly recommend importing your existing environment first, as this will give you a good starting point for your policies, policy sets and exemptions."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["This requires a computer running: ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4&WT.mc_id=AZ-MVP-5004796",children:"PowerShell"})," 7.3.1 or later, 7.3.4 ",(0,s.jsx)(n.em,{children:"(latest)"})," recommended, and the ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/powershell/azure/install-azure-powershell?view=azps-11.3.0&WT.mc_id=AZ-MVP-5004796",children:"Azure PowerShell"})," module installed (Az required 9.3.0 or later)."]})}),"\n",(0,s.jsx)(n.p,{children:"In my environment, I have a range of Custom and Builtin policies and initiatives, that are mostly deployed to at the top level, including Sandbox policies, and am I also running an NZISM 3.5 initiative, which is a builtin iniative but not the most up-to-date, so as part of the EPAC implementation, I want to replace the policy assignment with 3.6 custom and assign my Sandbox policies to the Sandbox Management Group."}),"\n",(0,s.jsx)(n.p,{children:"So let us get cracking!"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"First, we need to install the EPAC PowerShell module and the Az module and connect to our Azure environment."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"    Install-Module EnterprisePolicyAsCode -Scope CurrentUser\n    Install-Module Az -Scope CurrentUser\n    Connect-AzAccount\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Install PowerShell modules",src:i(89728).A+"",width:"1427",height:"430"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Once that's installed and you are connected to the Azure environment that you want to export your policies from, now we can do the export. To do the export, you have to generate a BuildDefinition folder to contain your policies, assignments and exemptions."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"    New-EPACDefinitionFolder -DefinitionsRootFolder Definitions\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Create Definitions folder",src:i(13529).A+"",width:"1427",height:"430"})}),"\n",(0,s.jsx)(n.p,{children:"That will create the following folders and files, giving us the base scaffolding for Enterprise Policy as Code:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Folder & Files"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"policyAssignments"}),(0,s.jsx)(n.td,{children:"Folder"}),(0,s.jsx)(n.td,{children:"Contains your Assignments (for both Policy and Initiatives)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"policyDefinitions"}),(0,s.jsx)(n.td,{children:"Folder"}),(0,s.jsx)(n.td,{children:"Contains your Policy Definitions"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"policyDocumentations"}),(0,s.jsx)(n.td,{children:"Folder"}),(0,s.jsx)(n.td,{children:"Contains documentation about your policies"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"policySetDefinitions"}),(0,s.jsx)(n.td,{children:"Folder"}),(0,s.jsx)(n.td,{children:"Contains the definitions for your initiatives (or PolicySets)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"global-settings.jsonc"}),(0,s.jsx)(n.td,{children:"File"}),(0,s.jsx)(n.td,{children:"Main configuration file, containing your environments and deployment paths"})]})]})]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Now that we have our base, scaffold - before we can import our existing Definitions and Assignments, we need to edit the 'global-settings.jsonc' file, to add in environment context."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"The file is a JSONC file, which is a JSON file with comments, so you can add comments to the file, which is great for documentation. The same jsonc format is also used for PolicyDefinitions and assignments, allowing you to add more context and notes to your policies and assignments! I encourage you to use this functionality to add notes and comments to your assignments!"})}),"\n",(0,s.jsx)(n.p,{children:"So open the global-settings.jsonc file, and paste the following example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonc",children:'    {\n        "$schema": "https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/global-settings-schema.json",\n        "pacOwnerId": "f2ce1aea-944e-4517-94fb-edada00633ae", // Generate a guid using New-Guid and place it here\n        "managedIdentityLocations": {\n            "*": "australiaeast" // Update the default location for managed identities\n        },\n        "globalNotScopes": {\n            "*": [\n                "/resourceGroupPatterns/excluded-rg*"\n            ]\n        },\n        "pacEnvironments": [\n            {\n                "pacSelector": "quick-start",\n                "cloud": "AzureCloud",\n                "tenantId": "bdb8ea1c-17da-4423-8895-6b79af002b4e", // Replace this with your tenant Id\n                "deploymentRootScope": "/providers/Microsoft.Management/managementGroups/root" // Replace this with a management group that represents the functional root in your environment. \n            }\n        ]\n    }\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Create global-settings.jsconc",src:i(33793).A+"",width:"1651",height:"912"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Reference: ",(0,s.jsx)(n.a,{href:"https://azure.github.io/enterprise-azure-policy-as-code/quick-start/",children:"EPAC Quick Start"})]})}),"\n",(0,s.jsx)(n.p,{children:"We now need to define our overall environment, and we can start by using PowerShell to generate our own unique pacOwnerId."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"    New-Guid\n"})}),"\n",(0,s.jsx)(n.p,{children:"The pacOwner helps to identify who or what owns an Assignment or Policy definition deployment and needs to be unique to your EPAC environment. The pacOwnerId is used to identity policy resources that are deployed by your EPAC repository, or another EPAC isntance, legacy or another solution entirely."}),"\n",(0,s.jsx)(n.p,{children:"Another thing you may need to adjust is the managedIdentityLocations, this is the default location for managed identities that are used for policies that are DeployIfNotExist and Modify. This is the location that the managed identity will be created in, if it does not exist. I will keep this as the example, AustraliaEast which is the primary region that my resources are deployed into."}),"\n",(0,s.jsx)(n.p,{children:"If you run multiple regions, you can remove the wildcard and replace it with the pacEnvironments name that represents your other regions."}),"\n",(0,s.jsx)(n.p,{children:"Although you can add exclusions to your individual Policy and PolicySetAssignments, the globalNotScopes is a way to exclude resources from all Policy and PolicySetAssignments, without having to add it to every single assignment, in this case, the example excludes all resources that are in a resource group that starts with 'excluded-rg'. You can exclude resources at different scopes, ie Resource Group, Subscriptions, Resouce Groups."}),"\n",(0,s.jsx)(n.p,{children:"Now, lets take a look at pacEnvironments. pacEnvironments is a way to define your environments, and the deploymentRootScope is the scope that represents the functional root in your environment. This is the top scope that all your Policy and PolicySetAssignments will be deployed to, and is the scope that you will be deploying your policies definitions to."}),"\n",(0,s.jsx)(n.p,{children:"The pacSelector will be used in your assignments to select what environment and scope you are deploying to, as you can have multiple environments, so give it a name that you can understand - ie 'epac-prod', 'epac-dev', 'epac-qa' etc. This will be reused in your assignments and pipelines."}),"\n",(0,s.jsx)(n.p,{children:"Make sure the tenantId matches your Entra ID and the deploymentRootScope is the top-level scope that you want to deploy your policies to."}),"\n",(0,s.jsx)(n.p,{children:"Save the file."}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"The next step is to import your existing policies and assignments, the commands will use the information you just defined in the 'global-settings.jsonc' file, to review of the scope and the environment of the export."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To do that, we will go back to PowerShell:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"  Export-AzPolicyResources -DefinitionsRootFolder .\\Definitions -OutputFolder Output\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Export-AzPolicyResources.gif",src:i(76149).A+"",width:"1425",height:"442"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you want to target a specific environment, ie you have a Management Group, where you want to deploy your policies and test using the Azure Portal first ",(0,s.jsx)(n.strong,{children:"(this can be useful for quickly importing assignments and policies in a format that's ready to go by EPAC)"}),", then you can add the '-InputPacSelector' parameter and target a specific environment for export, else it will do all environments listed in the global-settings."]})}),"\n",(0,s.jsxs)(n.p,{children:["Depending on the complexity of your environment, it could take a while, but once it is done, you will have a new folder called 'Output', which will contain an export of your policy-ownerships, definitions, assignments and exemptions in an Enterprise Policy as Code useable format ",(0,s.jsx)(n.em,{children:"(JSON)"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Your Output folder will contain the policy exemptions, assignments, and definitions of your existing environment."}),"\n",(0,s.jsx)(n.p,{children:"You can copy the files and folders from the Output folder, into the original Definitions folder, originally created, to bring in your existing policies and assignments into your EPAC environment."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Now is a great time to look at those exemptions and policy assignments and see if they are still relevant, and if they are, add comments to the files to give context to the assignments and exemptions and to help with the deployment of the policies and assignments in the future."})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-configure-azure-devops",children:"Step 2: Configure Azure DevOps"}),"\n",(0,s.jsx)(n.p,{children:"Now that we have our policies and assignments imported, we can now configure our Azure DevOps environment, to automatically deploy them. I am going to go through the process from the beginning but feel free to skip to the relevant sections if you already have a project and repository setup."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Login to Azure DevOps"}),"\n",(0,s.jsx)(n.li,{children:"Create a new project"}),"\n",(0,s.jsxs)(n.li,{children:["Give the project a name, and a description, and select the visibility of the project ",(0,s.jsx)(n.strong,{children:"(ie Private)"})]}),"\n",(0,s.jsx)(n.li,{children:"Click 'Create'"}),"\n",(0,s.jsx)(n.li,{children:"Navigate to Repos"}),"\n",(0,s.jsx)(n.li,{children:"Click on Files"}),"\n",(0,s.jsx)(n.li,{children:"Initialize the repository with a README or add a new file"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Create EPAC ADO Project",src:i(56919).A+"",width:"1905",height:"964"})}),"\n",(0,s.jsx)(n.p,{children:"Now that the repository has been initialized. We can now add the files from the EPAC StarterKit to the repository."}),"\n",(0,s.jsx)(n.p,{children:"Clone the repository to your local computer copy the Definitions folder to the repository and commit."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can Clone the Git repository using ",(0,s.jsx)(n.a,{href:"https://azuredevopslabs.com/labs/azuredevops/git/?T.mc_id=AZ-MVP-5004796",children:"Visual Studio Code"}),", or Git CLI or even ",(0,s.jsx)(n.a,{href:"https://luke.geek.nz/2021/12/30/git-using-github-desktop-on-windows-for-sysadmins/",children:"GitHub Desktop"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"Once cloned, copy the Definitions folder from the Output folder, into the repository, and commit the changes."}),"\n",(0,s.jsxs)(n.p,{children:["Now that we have our repository setup, we can now create a pipeline to deploy our policies and assignments, to get started we will grab the Azure Pipelines from the ",(0,s.jsx)(n.a,{href:"https://github.com/Azure/enterprise-azure-policy-as-code/tree/main/StarterKit/Pipelines",children:"StarterKit"})," folder, and copy them into the repository, along with the Scripts folder."]}),"\n",(0,s.jsx)(n.p,{children:"For this article, we will use the single-tenant-pipeline.yml file, as we are only deploying to a single environment, but if you are deploying to multiple environments, you can use the multi-tenant-pipeline.yml file."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Create ADO Pipeline",src:i(88891).A+"",width:"1905",height:"964"})}),"\n",(0,s.jsx)(n.p,{children:"Once downloaded, make sure you commit it to your repository. We will have to edit the pipeline, but before we do that - we need a Service Connection for Azure DevOps to connect to Azure to deploy the policies and assignments."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Open your EPAC Azure DevOps project"}),"\n",(0,s.jsx)(n.li,{children:"Click on Project Settings"}),"\n",(0,s.jsx)(n.li,{children:"Select Service Connections"}),"\n",(0,s.jsx)(n.li,{children:"Click on Create Service Connection"}),"\n",(0,s.jsx)(n.li,{children:"Click Azure Resource Manager"}),"\n",(0,s.jsx)(n.li,{children:"Click Next"}),"\n",(0,s.jsx)(n.li,{children:"Select Workload Identity Federation (Automatic) and click Next"}),"\n",(0,s.jsx)(n.li,{children:"Select Management Group"}),"\n",(0,s.jsx)(n.li,{children:"Select your top-level management group, that matches your Enterprise Policy as Code environment (ie where the definitions will be deployed to)"}),"\n",(0,s.jsxs)(n.li,{children:["Type in a name and description and click Save ",(0,s.jsx)(n.strong,{children:"(make sure this is a name that is easy to understand, and what its function is, we will reuse the name in our pipelines)"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Create Service Principal",src:i(51268).A+"",width:"1905",height:"964"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Enterprise Policy as Code (EPAC) suggests the least privileged and just enough permissions to deploy the policies, assignment and RBAC ",(0,s.jsx)(n.strong,{children:"(Role Based Access Control)"})," where they need to."]}),(0,s.jsx)(n.p,{children:"The pipeline itself will look for the following separate Service Connections:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"devServiceConnection - This service connection is used for development purposes, allowing the pipeline to connect to the development environment and deploy policies and assignments."}),"\n",(0,s.jsx)(n.li,{children:"tenantPlanServiceConnection - This service connection is used for managing the policy plan, which includes creating and updating policy definitions, policy sets, and policy initiatives."}),"\n",(0,s.jsx)(n.li,{children:"tenantDeployServiceConnection - This service connection is used for deploying policy assignments and exemptions to the target environment."}),"\n",(0,s.jsx)(n.li,{children:"tenantRolesServiceConnection - This service connection is used for managing RBAC (Role-Based Access Control) roles and permissions in the target environment."}),"\n"]}),(0,s.jsx)(n.p,{children:"So consider whether you have separate scopes and service principals for your environments."})]}),"\n",(0,s.jsx)(n.p,{children:"For the purposes of this article, I am going to use the same service principal to deploy all the EPAC functions, so let's edit the pipeline to use it."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"You can edit the Pipeline, either locally with Visual Studio Code and recommit it, or edit it directly in Azure DevOps, update the following variables with the relevant service connection names:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"devServiceConnection"}),"\n",(0,s.jsx)(n.li,{children:"tenantPlanServiceConnection"}),"\n",(0,s.jsx)(n.li,{children:"tenantDeployServiceConnection"}),"\n",(0,s.jsx)(n.li,{children:"tenantRolesServiceConnection"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Edit ADO Pipeline",src:i(33529).A+"",width:"1905",height:"964"})}),"\n",(0,s.jsx)(n.p,{children:"The single-tenant Azure DevOps pipeline has 5 stages:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Stage"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"devStage"}),(0,s.jsx)(n.td,{children:"This stage is used for planning, deploying, and assigning roles in the development environment. It uses the\xa0devServiceConnection\xa0to connect to Azure. The stage is only executed if the build reason is 'Manual', 'IndividualCI', or 'BatchedCI' and the source branch is not 'main'."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"tenantPlanFeatureStage"}),(0,s.jsx)(n.td,{children:"This stage is used for planning feature branches in the tenant environment. It uses the tenantPlanServiceConnection to connect to Azure. This stage depends on the devStage and is only executed if the devStage has not failed or been canceled, the build reason is 'Manual', 'IndividualCI', or 'BatchedCI', and the source branch is not 'main'."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"tenantPlanMainStage"}),(0,s.jsx)(n.td,{children:"This stage is used for planning the main branch in the tenant environment. It uses the tenantPlanServiceConnection to connect to Azure. This stage depends on the tenantPlanFeatureStage and is only executed if the tenantPlanFeatureStage has not failed or been canceled, the build reason is 'Manual', 'IndividualCI', or 'BatchedCI', and the source branch is 'main'."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"tenantDeployPolicyStage"}),(0,s.jsx)(n.td,{children:"This stage is used for deploying policies in the tenant environment. It uses the tenantDeployServiceConnection to connect to Azure. This stage depends on the tenantPlanMainStage and is only executed if the tenantPlanMainStage has not failed or been canceled, the tenantPlanMainStage has policy changes to deploy, the build reason is 'Manual', 'IndividualCI', or 'BatchedCI', and the source branch is 'main'."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"tenantRolesStage"}),(0,s.jsx)(n.td,{children:"This stage is used for deploying role assignments in the tenant environment. It uses the tenantRolesServiceConnection to connect to Azure. This stage depends on the tenantDeployPolicyStage and is only executed if the tenantDeployPolicyStage has not failed or been canceled, the tenantPlanMainStage has role changes to deploy, the build reason is 'Manual', 'IndividualCI', or 'BatchedCI', and the source branch is 'main'."})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"The name 'Tenant' is used to represent the environment that the policies and assignments are being deployed to. Tenant is the default name of the EPAC environment, so we will need to change this, to reflect our own environments. This is the pacSelector name, in the global-settings.jsonc file, that we created earlier."}),"\n",(0,s.jsx)(n.p,{children:"I will go back and add a new Service Connection, for Development, and add another development environment to the global-settings.jsonc. You don't need to do this, but it does give you the option to test your policies and assignments before deploying them to your main environment."}),"\n",(0,s.jsx)(n.p,{children:"Now we need to edit the pipeline again, to align to our pacEnvironments."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"You could do a a full Find and Replace, of the Word Tenant on the pipeline and replace it with your Production pacEnvironment name, just be wary that the stage name is used as a depedency for other steps, so you will need to make sure all references have been updated."})}),"\n",(0,s.jsx)(n.p,{children:"Once you have made the changes, commit the pipeline to your repository."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Edit ADO Pipeline - pacEnvironment",src:i(43954).A+"",width:"1905",height:"964"})}),"\n",(0,s.jsx)(n.p,{children:"Before we look at actually running the pipeline and redeploying the policies under Enterprise Policy as Code, we need to be aware of another environment option - and that is desiredState."}),"\n",(0,s.jsx)(n.p,{children:"desiredState allows you to control, how much control EPAC has over your environment, ie how much of a 'make it so'."}),"\n",(0,s.jsx)(n.p,{children:"desiredState options are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"full"}),"\n",(0,s.jsx)(n.li,{children:"ownedOnly"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If the desired state strategy is 'Full', then EPAC will manage all the policies and assignments in the environment and will remove any policies and assignments that are not in the EPAC repository.\nIf the desiredState strategy is 'ownedOnly', then EPAC will only manage the policies and assignments that are in the EPAC repository, and will not remove any policies and assignments that are not in the EPAC repository."}),"\n",(0,s.jsx)(n.p,{children:"Full is the default desiredState, so if you want to use ownedOnly, you will need to add the desiredState to the global-settings.jsonc file for the environment."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonc",children:'// desiredState is an optional object that specifies the desired state of the environment.\n          "desiredState": { // [optional]\n              // strategy specifies the strategy to achieve the desired state. The default is "full".\n              "ownedOnly": "full" // default full\n          }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Another environment option is related to Defender for Cloud. ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/azure/defender-for-cloud/policy-reference?WT.mc_id=AZ-MVP-5004796",children:"Defender for Cloud"})," uses Azure Policy Assignments to enable and configure the various capabilities.\nEnterprise Policy as Code could remove the Defender for Cloud assignments if they are not in the EPAC repository, so you can add the following to the global-settings.jsonc file to prevent this from happening."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonc",children:' "desiredState": { // [optional]\n              // strategy specifies the strategy to achieve the desired state. The default is "full".\n              "strategy": "full" ,// default full\n              "keepDfcSecurityAssignments": true // default false\n          }\n'})}),"\n",(0,s.jsx)(n.p,{children:"If set to true or strategy is ownedOnly, EPAC will not remove Security Policy assignments created by Defender for Cloud.\nIf omitted or set to false and strategy is full, EPAC will remove Security Policy Set Assignments created by Defender for Cloud."}),"\n",(0,s.jsx)(n.p,{children:"Even though these settings are managed by the default behaviour of Enterprise Policy as Code, I prefer to make sure they are added in the configuration for awareness. Security Policies should be managed by EPAC at the Management Group level; this is the recommended approach for managing Security Policies instead of relying on the auto-assignments, but as usual, it comes down to business requirements."}),"\n",(0,s.jsx)(n.h3,{id:"step-3-run-the-pipeline",children:"Step 3: Run the Pipeline"}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsx)(n.p,{children:"Make sure you test your deployment in a development environment before deploying to your main environment, especially if you are using the 'full' desiredState strategy."})}),"\n",(0,s.jsx)(n.p,{children:"Now it's time to import the pipeline."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Login to Azure DevOps"}),"\n",(0,s.jsx)(n.li,{children:"Navigate to your EPAC project"}),"\n",(0,s.jsx)(n.li,{children:"Navigate to Pipelines"}),"\n",(0,s.jsx)(n.li,{children:"Click on Create Pipeline"}),"\n",(0,s.jsx)(n.li,{children:"Click on Azure Repos Git"}),"\n",(0,s.jsx)(n.li,{children:"Select your repository"}),"\n",(0,s.jsx)(n.li,{children:"Select Existing Azure pipelines YAML file"}),"\n",(0,s.jsx)(n.li,{children:"Under path, select single-tenant-pipeline.yml"}),"\n",(0,s.jsx)(n.li,{children:"Click Save"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Import ADO Pipeline",src:i(90172).A+"",width:"1905",height:"964"})}),"\n",(0,s.jsx)(n.p,{children:"Now that it's imported, we can run the pipeline. The first pipeline deployment is aimed at making the state of Azure match the EPAC environment and also giving access to the pipelines to the Service Connections."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Run ADO Pipeline",src:i(85118).A+"",width:"1905",height:"964"})}),"\n",(0,s.jsx)(n.p,{children:"If this is the first time the pipeline has been run, there may be delays, as you need to approve the pipeline to be able to use the Service Connections."}),"\n",(0,s.jsx)(n.p,{children:"Congratulations! You have deployed your Azure Policy as Code!"}),"\n",(0,s.jsxs)(n.p,{children:["If you login to the Azure Portal and navigate to your ",(0,s.jsx)(n.a,{href:"https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Assignments",children:"Policies and assignments"}),", they should match."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Azure Policy Assignments",src:i(50050).A+"",width:"1860",height:"630"})}),"\n",(0,s.jsx)(n.h2,{id:"policy-configuration",children:"Policy configuration"}),"\n",(0,s.jsx)(n.p,{children:"Now that the policies and assignments are deployed, you can start to configure your policies and assignments to match your environment."}),"\n",(0,s.jsx)(n.h3,{id:"change-assignment-scope",children:"Change assignment scope"}),"\n",(0,s.jsx)(n.p,{children:"In my scenario, my Sandbox policies are assigned to my Lukegeeknz Management Group, and I want them to be assigned to my Sandbox Management Group, so I will need to update the policy assignments to reflect this."}),"\n",(0,s.jsx)(n.p,{children:"I will test this by deploying it into a New Branch, which will trigger the dev Plan."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Change assignment scope",src:i(83918).A+"",width:"1905",height:"964"})}),"\n",(0,s.jsx)(n.p,{children:"And we can see in the plan that the assignment will change successfully."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Azure DevOps epac-dev plan",src:i(69211).A+"",width:"1110",height:"747"})}),"\n",(0,s.jsx)(n.p,{children:"Now, let's merge or change into Production by opening up a Pull Request; once approved and merged, the Sandbox assignment will be updated in Production."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"EPAC Pull Request",src:i(14416).A+"",width:"1905",height:"964"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Azure Policy Assignment",src:i(41179).A+"",width:"1630",height:"634"})}),"\n",(0,s.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,s.jsxs)(n.p,{children:["You can view my EPAC code for reference directly on GitHub: ",(0,s.jsx)(n.a,{href:"https://github.com/lukemurraynz/EPAC_ADO",children:"lukemurraynz/EPAC_ADO"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},50050:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/AzurePortal_PolicyAssignments-d9665ddff7687b4d9ee52c07d99066ca.png"},41179:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/AzurePortal_PolicyAssignments.pngAfterChange-07735dd82cf91181554af7de91fca2c3.png"},27443:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/BlogHeading_EPAC_ADO-a41d97fd00f51d878eaeb05f1062f2f0.png"},83918:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Change_EPAC-AssignmentScopeSandbox-b20af13b32d9f00de96df5bbc45c6289.gif"},14416:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Change_EPAC-AssignmentScopeSandboxPR-603ce031e8264642485384496e822f89.gif"},56919:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Create-ADO_EPACProject-35acaa80d23ed95c3393478b99d48bc6.gif"},88891:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Create_ADO-PipelineTemplate-131d7d4064333057e45023afd10bc612.gif"},51268:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Create_ADO-SPN-7c51a1d317687cbfca9f09efa4646cce.gif"},33793:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/EPAC_Create-global-settings.jsconc-112062cb27d7038ca537f96c06032d52.gif"},13529:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/EPAC_CreateDefinitionsFolder-0c8ac69994b2446e31f8d70ee41b5b70.gif"},89728:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/EPAC_InstallPowerShellModules-254029f276bc1c4a575625334538f865.gif"},33529:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Edit_ADO-Pipeline_SPN-59f9f6285d55fdebcd41ddf30877575d.gif"},43954:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Edit_ADO-Pipeline_pacEnvironments-07b7d7bbe8d09e9716bb05d15ea2c305.gif"},38276:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/EnterprisePolicyAsCode_PolicyAssignmentScope-7d18c856613c5eb49fafde315dae583b.png"},76149:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Export-AzPolicyResources-274a0a1cef4a119017c2e35e0303f775.gif"},90172:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Import_ADO-Pipeline-c0c611311aca5b5fff308746e277797d.gif"},62159:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/PolicyDefinition-abd0e9ab78b3adc92f5a82019c89215b.png"},85118:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Run_ADO-Pipeline-72afa5d25f14d97a32c20e47e2a72943.gif"},69211:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/Run_ADO-Pipeline_Dev_Plan-592f4f43bc055370866dba7cec16af03.png"},78525:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/WhatIsAzurePolicy-b02306db2a09442ad39eab10756720af.png"},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},47650:e=>{e.exports=JSON.parse('{"permalink":"/azure/enterprise-policy-code-azure-devops","source":"@site/blog/2024-02-19-epac/index.mdx","title":"Enterprise Policy as Code with Azure DevOps","description":"Enterprise Azure Policy as Code, or EPAC for short, comprises a number of scripts which can be used in a CI/CD-based system or a semi-automated use to deploy Policies, Policy Sets, Assignments, Policy Exemptions and Role Assignments. Let us take a look at its use.","date":"2024-02-18T23:25:11.692Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":18.97,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Enterprise Policy as Code with Azure DevOps","metaDescription":"Enterprise Azure Policy as Code or EPAC for short comprises a number of scripts which can be used in CI/CD based system or a semi-automated use to deploy Policies, Policy Sets, Assignments, Policy Exemptions and Role Assignments. Lets take a look at its use.","date":"2024-02-18T23:25:11.692Z","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"header":{"teaser":"BlogHeading_EPAC_ADO.png"},"slug":"azure/enterprise-policy-code-azure-devops","keywords":["azure","policy","azurepolicy","security","iac"],"description":"Enterprise Azure Policy as Code, or EPAC for short, comprises a number of scripts which can be used in a CI/CD-based system or a semi-automated use to deploy Policies, Policy Sets, Assignments, Policy Exemptions and Role Assignments. Let us take a look at its use."},"unlisted":false,"prevItem":{"title":"Tag Azure Resources with Owner using Azure Automation","permalink":"/azure/tag-azure-resources-owner-azure-automation-runbook"},"nextItem":{"title":"Accessing KeyVault from Azure DevOps","permalink":"/azure/accessing-keyvault-azure-devops"}}')}}]);