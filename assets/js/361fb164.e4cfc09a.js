"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[78612],{75566:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>u});var t=n(34028),a=n(74848),i=n(28453);const r={title:"Native Service Bus Publishing from API Management",metaDescription:"How to publish messages to Azure Service Bus directly from API Management using the new native integration, with step-by-step setup and policy examples.",tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"azure/servicebusapimpublish",keywords:["Azure","Azure API Management","Service Bus","Message Publishing","AMQP","API Policy","Managed Identity","Integration","Cloud Messaging"],description:"How to publish messages to Azure Service Bus directly from API Management using the new native integration, with step-by-step setup and policy examples.",date:new Date("2025-10-23T21:03:42.152Z")},o=void 0,c={authorsImageUrls:[void 0]},u=[];function p(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",img:"img",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:["Recently Microsoft announced ",(0,a.jsx)(s.a,{href:"https://techcommunity.microsoft.com/blog/integrationsonazureblog/introducing-native-service-bus-message-publishing-from-azure-api-management-prev/4462644?WT.mc_id=AZ-MVP-5004796",children:"native Service Bus message publishing from Azure API Management"}),", today we are going to take a look at this new feature and see how we can use it to publish messages AMQP ",(0,a.jsx)(s.em,{children:"(Advanced Message Queuing Protocol)"})," to an Azure Service Bus queue or topic directly through an API Management endpoint, without needing middleware to do a transform for you -  allowing external systems and mobile apps that lack native AMQP support can send messages to Service Bus by using standard HTTP/REST APIs via API Management."]}),"\n","\n",(0,a.jsxs)(s.admonition,{type:"info",children:[(0,a.jsx)(s.p,{children:"A client sends a standard HTTP request to your API endpoint in API Management.\nThe policy executes and sends the payload as a message to the Service Bus.\nDownstream consumers such as Logic Apps, Azure Functions, or microservices process those messages asynchronously."}),(0,a.jsx)(s.mermaid,{value:"sequenceDiagram\n    participant Client\n    participant APIM as API Management\n    participant SB as Service Bus Queue/Topic\n    participant LA as Logic Apps\n    participant AF as Azure Functions\n    participant MS as Microservices\n\n    Client->>APIM: HTTP Request (REST/JSON)\n    Note over APIM: Policy executes\n    APIM->>SB: Publish message (AMQP)\n    Note over SB: Message queued\n    par Async Processing\n        SB->>LA: Process message\n        SB->>AF: Process message\n        SB->>MS: Process message\n    end"}),(0,a.jsx)(s.p,{children:"All configurations happen in API Management - no code changes or new infrastructure are required."})]}),"\n",(0,a.jsx)(s.p,{children:"The resources I am using for this test are as follows:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["API Management ",(0,a.jsx)(s.em,{children:"(Developer tier)"})]}),"\n",(0,a.jsx)(s.li,{children:"Azure Service Bus Namespace with a Queue"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"These resources were created in the New Zealand North Azure region."}),"\n",(0,a.jsxs)(s.p,{children:["The API Management instance has System Managed identity enabled, and that identity has been granted the ",(0,a.jsx)(s.code,{children:"Azure Service Bus Data Sender"})," role on the Service Bus namespace."]}),"\n",(0,a.jsxs)(s.p,{children:["So let us test this out, in my test I have the default ",(0,a.jsx)(s.code,{children:"Echo API"})," enabled in API Management, have created a new API operation called ",(0,a.jsx)(s.code,{children:"ServiceBus"}),", this operation will accept a POST request with a JSON payload, and then publish that payload to the Service Bus queue ",(0,a.jsx)(s.em,{children:"(its worth noting there is no backend required for this endpoint as the policy does the heavy lifting here)"}),"."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{alt:"Azure API Management POST Endpoint",src:n(75243).A+"",width:"1868",height:"748"})}),"\n",(0,a.jsx)(s.p,{children:"The policy I have applied to this operation is as follows:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'\x3c!--\n    - Policies are applied in the order they appear.\n    - Position <base/> inside a section to inherit policies from the outer scope.\n    - Comments within policies are not preserved.\n--\x3e\n\x3c!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements --\x3e\n<policies>\n    \x3c!-- Throttle, authorize, validate, cache, or transform the requests --\x3e\n    <inbound>\n        <send-service-bus-message queue-name="your-queue" namespace="your-namespace.servicebus.windows.net">\n            <message-properties>\n                <message-property name="ApiName">@(context.Api?.Name)</message-property>\n                <message-property name="Operation">@(context.Operation?.Name)</message-property>\n                <message-property name="CallerIp">@(context.Request.IpAddress)</message-property>\n                <message-property name="ContentType">@(context.Request.Headers.GetValueOrDefault("Content-Type","application/json"))</message-property>\n                <message-property name="TimestampUtc">@(DateTime.UtcNow.ToString("o"))</message-property>\n            </message-properties>\n            <payload>@(context.Request.Body.As<string>(preserveContent: true))</payload>\n        </send-service-bus-message>\n        <return-response>\n            <set-status code="201" reason="Message Created" />\n        </return-response>\n    </inbound>\n    \x3c!-- Control if and how the requests are forwarded to services  --\x3e\n    <backend />\n    \x3c!-- Customize the responses --\x3e\n    <outbound />\n    \x3c!-- Handle exceptions and customize error responses  --\x3e\n    <on-error>\n        <base />\n    </on-error>\n</policies>\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Note the queue-name and namespace attributes in the ",(0,a.jsx)(s.code,{children:"<send-service-bus-message>"})," policy; these need to match your Service Bus queue name and namespace. You can also add a connection-string attribute if you want to use a specific connection string rather than the managed identity."]}),"\n",(0,a.jsxs)(s.p,{children:["You can read more about it here: ",(0,a.jsx)(s.a,{href:"https://learn.microsoft.com/azure/api-management/send-service-bus-message-policy?WT.mc_id=AZ-MVP-5004796",children:"Send service bus message"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"Now we can test this out. I am using Bruno to send a POST request to the API Management endpoint with a sample JSON payload:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-json",children:'{\n  "messageId": "SG-1-12345",\n  "body": {\n    "data": "Chevron seven locked. Unscheduled off-world activation detected. Requesting permission to open the iris. (Teal\'c: \\"Indeed.\\")",\n    "timestamp": "2025-10-24T12:00:00Z"\n  },\n  "properties": {\n    "priority": "chevron-seven-locked",\n    "source": "Stargate Command"\n  }\n}\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{alt:"Azure API Management Service Bus Test",src:n(66093).A+"",width:"1027",height:"676"})}),"\n",(0,a.jsxs)(s.p,{children:["We can see the message was accepted with a ",(0,a.jsx)(s.code,{children:"201 Message Created"})," response, and if we check the Service Bus queue, we can see the message has arrived successfully:"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{alt:"Service Bus Queue - API",src:n(98753).A+"",width:"1639",height:"799"})}),"\n",(0,a.jsx)(s.p,{children:"If we navigate to the Message Properties, we can see the custom properties we added in the policy have been applied to the message:"}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{alt:"Azure API Management Service Bus Test",src:n(8303).A+"",width:"1631",height:"880"})}),"\n",(0,a.jsx)(s.p,{children:"From there, you can easily have downstream consumers such as Logic Apps, Azure Functions, or microservices process those messages."})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},66093:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/apimsbpostendpointbrunotest-a2cd71ff421cca5660b3a1670b588f78.jpg"},75243:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/apimsbpostendpointdesign-43ce9954847dac941c0d227ac6e1bd97.jpg"},98753:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/apimsbpostendpointsbqueue-04f4ea96e30360ce58809045a10f0ba7.jpg"},8303:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/apimsbpostendpointsbqueuecustomproperties-e1d03887943c6246761cda98ebef9d65.jpg"},28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>o});var t=n(96540);const a={},i=t.createContext(a);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:s},e.children)}},34028:e=>{e.exports=JSON.parse('{"permalink":"/azure/servicebusapimpublish","source":"@site/blog/2025-10-24-apimsbus/index.mdx","title":"Native Service Bus Publishing from API Management","description":"How to publish messages to Azure Service Bus directly from API Management using the new native integration, with step-by-step setup and policy examples.","date":"2025-10-23T21:03:42.152Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":3.81,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Native Service Bus Publishing from API Management","metaDescription":"How to publish messages to Azure Service Bus directly from API Management using the new native integration, with step-by-step setup and policy examples.","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"slug":"azure/servicebusapimpublish","keywords":["Azure","Azure API Management","Service Bus","Message Publishing","AMQP","API Policy","Managed Identity","Integration","Cloud Messaging"],"description":"How to publish messages to Azure Service Bus directly from API Management using the new native integration, with step-by-step setup and policy examples.","date":"2025-10-23T21:03:42.152Z"},"unlisted":false,"nextItem":{"title":"Spec-Driven Azure Platform Landing Zone with Bicep","permalink":"/azure/spec-driven-platform-landing-zone-bicep"}}')}}]);