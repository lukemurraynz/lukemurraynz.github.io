"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[13433],{10604:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var r=t(52864),i=t(74848),s=t(28453);const o={title:"Integrating Microsoft Learn MCP Server with Semantic Kernel",metaDescription:"Learn how to integrate Microsoft Learn MCP Server with the Semantic Kernel for enhanced documentation and AI capabilities.",tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"azure/learn-mcp-server-semantic-kernel",keywords:["Azure","Semantic Kernel","Model Context Protocol","MCP","Microsoft Learn","Microsoft Learn MCP Server","AI Integration","Content Discovery","Azure Container Apps","Azure Functions","Documentation API","C# .NET","JSON-RPC","Plugin Development","Microsoft Docs","OpenAI","ChatGPT","AI Documentation","Microsoft Graph"],description:"Learn how to integrate Microsoft Learn MCP Server with the Semantic Kernel for enhanced documentation and AI capabilities.",date:new Date("2025-09-27T00:00:00.000Z")},a=void 0,c={authorsImageUrls:[void 0]},l=[{value:"Architecture overview",id:"architecture-overview",level:2},{value:"Implementation",id:"implementation",level:2},{value:"The actual plugin code",id:"the-actual-plugin-code",level:2},{value:"Getting full pages",id:"getting-full-pages",level:3},{value:"Hooking it up",id:"hooking-it-up",level:2},{value:"Using it",id:"using-it",level:2},{value:"Direct invocation",id:"direct-invocation",level:3},{value:"Automatic function calling",id:"automatic-function-calling",level:3},{value:"Working with the response",id:"working-with-the-response",level:3},{value:"What&#39;s actually happening on the wire",id:"whats-actually-happening-on-the-wire",level:2},{value:"Request Format",id:"request-format",level:3},{value:"Response Format",id:"response-format",level:3},{value:"Production notes",id:"production-notes",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Docker",id:"docker",level:3},{value:"Health checks",id:"health-checks",level:3},{value:"Real-world usage",id:"real-world-usage",level:2},{value:"Wrapping up",id:"wrapping-up",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"I was recently working on a content discovery app and needed access to current Microsoft documentation, but I wasn't keen on scraping their site (and dealing with all that maintenance overhead)."}),"\n","\n",(0,i.jsxs)(n.p,{children:["So, that leaves the ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/training/support/mcp?WT.mc_id=AZ-MVP-5004796",children:"Microsoft Learn MCP Server"}),". Model Context Protocol (MCP) is essentially a standardized method for connecting external data sources to AI applications. Microsoft maintains its own Learn MCP Server, which stays current with its documentation, and this solved my problem perfectly."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Lets Learn MCP",src:t(30615).A+"",title:"Microsoft Learn MCP",width:"1280",height:"720"})}),"\n",(0,i.jsxs)(n.p,{children:["The problem was that most ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/semantic-kernel/overview/?WT.mc_id=AZ-MVP-5004796",children:"Semantic Kernel"})," examples for ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/semantic-kernel/concepts/plugins/adding-mcp-plugins?pivots=programming-language-csharp&WT.mc_id=AZ-MVP-5004796",children:"MCP integration"})," use Python, but my project is C# (.NET 9). It took a bit of figuring out, but I eventually got it working. Here's the implementation in case it helps someone else."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Learn MCP",src:t(6294).A+"",title:"Microsoft Learn MCP Server",width:"1280",height:"720"})}),"\n",(0,i.jsx)(n.h2,{id:"architecture-overview",children:"Architecture overview"}),"\n",(0,i.jsxs)(n.p,{children:["The setup is fairly simple: React frontend \u2192 Semantic Kernel backend on ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/azure/container-apps/overview?WT.mc_id=AZ-MVP-5004796",children:"Azure Container Apps"}),". When users ask questions, SK determines which plugin to use. For Microsoft-related queries, it calls the MCP plugin."]}),"\n",(0,i.jsx)(n.p,{children:"Here's what happens:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:'User: "How do I configure Azure Functions?"'}),"\n",(0,i.jsx)(n.li,{children:'SK: "This needs Microsoft docs, let me call the Learn MCP plugin."'}),"\n",(0,i.jsx)(n.li,{children:"Learn MCP plugin hits Microsoft's server with the search"}),"\n",(0,i.jsx)(n.li,{children:"Fresh documentation comes back"}),"\n",(0,i.jsx)(n.li,{children:"SK combines that with its knowledge to answer"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'{\n  "MicrosoftLearn": {\n    "McpEndpoint": "https://learn.microsoft.com/api/mcp"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.p,{children:"First, add these packages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<PackageReference Include="Microsoft.SemanticKernel" Version="1.0.1" />\n<PackageReference Include="Microsoft.Extensions.Http" Version="8.0.0" />\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The other dependencies (",(0,i.jsx)(n.code,{children:"System.Text.Json"}),", ",(0,i.jsx)(n.code,{children:"Microsoft.Extensions.Configuration"}),", etc.) are likely already in your project."]}),"\n",(0,i.jsx)(n.p,{children:"And the necessary using statements:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using System.ComponentModel;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.SemanticKernel;\n"})}),"\n",(0,i.jsx)(n.p,{children:"The plugin class itself is pretty simple - needs an HttpClient and some basic setup:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class MicrosoftLearnMCPPlugin\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILogger<MicrosoftLearnMCPPlugin> _logger;\n    private readonly string _mcpEndpoint;\n    private readonly JsonSerializerOptions _jsonOptions;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Constructor just wires up the dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public MicrosoftLearnMCPPlugin(\n    HttpClient httpClient,\n    ILogger<MicrosoftLearnMCPPlugin> logger,\n    IConfiguration configuration)\n{\n    _httpClient = httpClient;\n    _logger = logger;\n    _mcpEndpoint = configuration["MicrosoftLearn:McpEndpoint"] ?? "https://learn.microsoft.com/api/mcp";\n    _jsonOptions = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"the-actual-plugin-code",children:"The actual plugin code"}),"\n",(0,i.jsx)(n.p,{children:"This is where it gets interesting. The Learn MCP protocol is just JSON-RPC 2.0 over HTTP, so I built a simple wrapper that Semantic Kernel can call:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[KernelFunction("search_microsoft_docs")]\n[Description("Searches official Microsoft Learn documentation with language preference support")]\npublic async Task<string> SearchMicrosoftDocsAsync(\n    [Description("Search query")] string query,\n    [Description("Max results")] int maxResults = 5,\n    [Description("Language locale for localized content (e.g., en-us, es-es, fr-fr)")] string locale = "en-us")\n{\n    try\n    {\n        _logger.LogInformation("Searching Microsoft Learn for \'{Query}\' with locale \'{Locale}\'", query, locale);\n\n        var request = new\n        {\n            jsonrpc = "2.0",\n            id = Guid.NewGuid().ToString(),\n            method = "tools/call",\n            @params = new\n            {\n                name = "microsoft_docs_search",\n                arguments = new { query, maxResults, locale }\n            }\n        };\n\n        var jsonContent = JsonSerializer.Serialize(request, _jsonOptions);\n        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");\n\n        var httpRequest = new HttpRequestMessage(HttpMethod.Post, _mcpEndpoint)\n        {\n            Content = content\n        };\n        \n        httpRequest.Headers.Accept.Clear();\n        httpRequest.Headers.Accept.ParseAdd("application/json");\n        httpRequest.Headers.Add("User-Agent", "SemanticKernel-ContentDiscovery/1.0");\n\n        var response = await _httpClient.SendAsync(httpRequest);\n        var responseContent = await response.Content.ReadAsStringAsync();\n\n        if (response.IsSuccessStatusCode)\n        {\n            return responseContent;\n        }\n        else\n        {\n            _logger.LogWarning("Learn MCP server returned error {StatusCode}: {Content}", response.StatusCode, responseContent);\n            // Note: Return JSON instead of throwing - SK handles this better\n            var fallback = new { success = false, error = $"Learn MCP server error: {response.StatusCode}", query = query };\n            return JsonSerializer.Serialize(fallback, _jsonOptions);\n        }\n    }\n    catch (Exception ex)\n    {\n        _logger.LogError(ex, "Error searching Microsoft Learn for \'{Query}\'", query);\n        var fallback = new { success = false, error = ex.Message, query = query };\n        return JsonSerializer.Serialize(fallback, _jsonOptions);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"getting-full-pages",children:"Getting full pages"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes the search snippets aren't enough, and you need the whole article:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[KernelFunction("fetch_microsoft_docs")]\n[Description("Fetches full content from a Microsoft Learn documentation page")]\npublic async Task<string> FetchMicrosoftDocsAsync(\n    [Description("URL of the Microsoft Learn page")] string url)\n{\n    try\n    {\n        var request = new\n        {\n            jsonrpc = "2.0",\n            id = Guid.NewGuid().ToString(),\n            method = "tools/call",\n            @params = new\n            {\n                name = "microsoft_docs_fetch",\n                arguments = new { url }\n            }\n        };\n\n        var jsonContent = JsonSerializer.Serialize(request, _jsonOptions);\n        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");\n\n        var httpRequest = new HttpRequestMessage(HttpMethod.Post, _mcpEndpoint)\n        {\n            Content = content\n        };\n\n        var response = await _httpClient.SendAsync(httpRequest);\n        var responseContent = await response.Content.ReadAsStringAsync();\n\n        return response.IsSuccessStatusCode ? responseContent : \n            JsonSerializer.Serialize(new { success = false, error = $"HTTP {response.StatusCode}" }, _jsonOptions);\n    }\n    catch (Exception ex)\n    {\n        return JsonSerializer.Serialize(new { success = false, error = ex.Message }, _jsonOptions);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"hooking-it-up",children:"Hooking it up"}),"\n",(0,i.jsxs)(n.p,{children:["Standard DI registration in ",(0,i.jsx)(n.code,{children:"Program.cs"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Register services\nbuilder.Services.AddSingleton<MicrosoftLearnMCPPlugin>();\nbuilder.Services.AddHttpClient<MicrosoftLearnMCPPlugin>();\n\n// Configure the kernel\nbuilder.Services.AddScoped<Kernel>(serviceProvider =>\n{\n    var kernel = Kernel.CreateBuilder()\n        .AddOpenAIChatCompletion("gpt-4", Environment.GetEnvironmentVariable("OPENAI_API_KEY"))\n        .Build();\n\n    // Add the Learn MCP plugin to the kernel\n    var mcpPlugin = serviceProvider.GetRequiredService<MicrosoftLearnMCPPlugin>();\n    kernel.Plugins.AddFromObject(mcpPlugin, "MicrosoftLearnMCP");\n\n    return kernel;\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"using-it",children:"Using it"}),"\n",(0,i.jsx)(n.p,{children:"There are a couple of ways to call this thing:"}),"\n",(0,i.jsx)(n.h3,{id:"direct-invocation",children:"Direct invocation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Search for documentation\nvar searchResult = await kernel.InvokeAsync("MicrosoftLearnMCP", "search_microsoft_docs", \n    new KernelArguments\n    {\n        ["query"] = "Azure Functions",\n        ["maxResults"] = 5,\n        ["locale"] = "en-us"\n    });\n\n// Fetch a specific page if you need the full content\nvar fetchResult = await kernel.InvokeAsync("MicrosoftLearnMCP", "fetch_microsoft_docs",\n    new KernelArguments\n    {\n        ["url"] = "https://learn.microsoft.com/en-us/azure/azure-functions/"\n    });\n'})}),"\n",(0,i.jsx)(n.h3,{id:"automatic-function-calling",children:"Automatic function calling"}),"\n",(0,i.jsx)(n.p,{children:"SK can automatically determine when to use the plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'var chatHistory = new ChatHistory();\nchatHistory.AddUserMessage("I need to learn about Azure Container Apps scaling");\n\n// Enable automatic function calling\nvar executionSettings = new OpenAIPromptExecutionSettings()\n{\n    ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions\n};\n\nvar response = await kernel.GetRequiredService<IChatCompletionService>()\n    .GetChatMessageContentAsync(chatHistory, executionSettings, kernel);\n\nConsole.WriteLine(response.Content);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"working-with-the-response",children:"Working with the response"}),"\n",(0,i.jsx)(n.p,{children:"The Learn MCP server sends back JSON that you can parse if you need to do something specific with the results:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'var searchResult = await kernel.InvokeAsync("MicrosoftLearnMCP", "search_microsoft_docs", \n    new KernelArguments { ["query"] = "Azure Functions" });\n\n// Parse the JSON response\nvar jsonResponse = JsonSerializer.Deserialize<JsonElement>(searchResult.ToString());\n\nif (jsonResponse.TryGetProperty("result", out var result) && \n    result.TryGetProperty("content", out var content))\n{\n    var articles = content.EnumerateArray();\n    foreach (var article in articles)\n    {\n        var title = article.GetProperty("title").GetString();\n        var url = article.GetProperty("url").GetString();\n        Console.WriteLine($"Found: {title} - {url}");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"whats-actually-happening-on-the-wire",children:"What's actually happening on the wire"}),"\n",(0,i.jsx)(n.p,{children:"If you're curious about the protocol details, it's just JSON-RPC 2.0:"}),"\n",(0,i.jsx)(n.h3,{id:"request-format",children:"Request Format"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "jsonrpc": "2.0",\n  "id": "unique-guid",\n  "method": "tools/call",\n  "params": {\n    "name": "microsoft_docs_search",\n    "arguments": {\n      "query": "Azure Functions",\n      "maxResults": 5,\n      "locale": "en-us"\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"response-format",children:"Response Format"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "jsonrpc": "2.0",\n  "id": "unique-guid",\n  "result": {\n    "content": [\n      {\n        "type": "text",\n        "text": "JSON response with search results"\n      }\n    ]\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"production-notes",children:"Production notes"}),"\n",(0,i.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Don't hardcode the endpoint URL:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// appsettings.Production.json\n{\n  "MCP": {\n    "MicrosoftLearnEndpoint": "${MCP_MICROSOFT_LEARN_ENDPOINT}",\n    "Timeout": "00:00:30",\n    "MaxRetries": 3\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"docker",children:"Docker"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:"# In your Dockerfile\nENV MCP_MICROSOFT_LEARN_ENDPOINT=http://your-mcp-server:3000/mcp\n"})}),"\n",(0,i.jsx)(n.h3,{id:"health-checks",children:"Health checks"}),"\n",(0,i.jsx)(n.p,{children:"Monitor Learn MCP server availability:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// In Program.cs\nbuilder.Services.AddHealthChecks()\n    .AddCheck<MCPHealthCheck>("mcp-server");\n\npublic class MCPHealthCheck : IHealthCheck\n{\n    private readonly HttpClient _httpClient;\n    private readonly IConfiguration _config;\n    \n    public MCPHealthCheck(HttpClient httpClient, IConfiguration config)\n    {\n        _httpClient = httpClient;\n        _config = config;\n    }\n    \n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context, \n        CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var endpoint = _config["MCP:MicrosoftLearnEndpoint"];\n            using var response = await _httpClient.GetAsync($"{endpoint}/health", cancellationToken);\n            \n            return response.IsSuccessStatusCode \n                ? HealthCheckResult.Healthy("Learn MCP server is responding")\n                : HealthCheckResult.Unhealthy("Learn MCP server returned non-success status");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy($"Learn MCP server check failed: {ex.Message}");\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"real-world-usage",children:"Real-world usage"}),"\n",(0,i.jsxs)(n.p,{children:["Example query: ",(0,i.jsx)(n.em,{children:'"How do I scale my Azure Functions based on queue length?"'})]}),"\n",(0,i.jsx)(n.p,{children:"What happens:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"SK identifies this as an Azure Functions question"}),"\n",(0,i.jsx)(n.li,{children:"Calls the Learn MCP plugin to search for current scaling documentation"}),"\n",(0,i.jsx)(n.li,{children:"Returns up-to-date information from Microsoft Learn"}),"\n",(0,i.jsx)(n.li,{children:"Combines this with the model's existing knowledge"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This ensures users get current information rather than potentially outdated training data."}),"\n",(0,i.jsx)(n.h2,{id:"wrapping-up",children:"Wrapping up"}),"\n",(0,i.jsx)(n.p,{children:"This turned out simpler than expected. No scraping, no stale docs, no index maintenance - just direct access to Microsoft's current documentation through their Learn MCP server."}),"\n",(0,i.jsxs)(n.p,{children:["To learn more about Microsoft Learn MCP Server and its capabilities, visit ",(0,i.jsx)(n.a,{href:"https://aka.ms/MSLearnMCPServer",children:"https://aka.ms/MSLearnMCPServer"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Beyond my content discovery use case, this approach works well for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Support chatbots needing current Azure documentation"}),"\n",(0,i.jsx)(n.li,{children:"Internal developer tools"}),"\n",(0,i.jsx)(n.li,{children:"Learning applications requiring up-to-date tutorials"}),"\n",(0,i.jsx)(n.li,{children:"Any AI system working with Microsoft technologies"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The Learn MCP ecosystem is growing, and I expect more providers will adopt it. The protocol's simplicity enables the support of multiple MCP servers within a single application."}),"\n",(0,i.jsx)(n.p,{children:"For applications requiring Microsoft documentation, this approach is more reliable than scraping or maintaining local caches. The implementation above should provide a solid foundation for further development."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},30615:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/Lets-Learn-MCP-2025_MCPDeepDive-7530f0c05f5616e9af5adb00cc58ef0c.jpg"},6294:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/MCP-4271e667cf138aeedd20bb8dbadd8ae0.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},52864:e=>{e.exports=JSON.parse('{"permalink":"/azure/learn-mcp-server-semantic-kernel","source":"@site/blog/2025-09-27-learndocsmcpsk/index.mdx","title":"Integrating Microsoft Learn MCP Server with Semantic Kernel","description":"Learn how to integrate Microsoft Learn MCP Server with the Semantic Kernel for enhanced documentation and AI capabilities.","date":"2025-09-27T00:00:00.000Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":6.66,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"Integrating Microsoft Learn MCP Server with Semantic Kernel","metaDescription":"Learn how to integrate Microsoft Learn MCP Server with the Semantic Kernel for enhanced documentation and AI capabilities.","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"slug":"azure/learn-mcp-server-semantic-kernel","keywords":["Azure","Semantic Kernel","Model Context Protocol","MCP","Microsoft Learn","Microsoft Learn MCP Server","AI Integration","Content Discovery","Azure Container Apps","Azure Functions","Documentation API","C# .NET","JSON-RPC","Plugin Development","Microsoft Docs","OpenAI","ChatGPT","AI Documentation","Microsoft Graph"],"description":"Learn how to integrate Microsoft Learn MCP Server with the Semantic Kernel for enhanced documentation and AI capabilities.","date":"2025-09-27T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"User-Assigned Managed Identity vs Service Principal (WIF)","permalink":"/azure/umispn"}}')}}]);