"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[23380],{94638:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>h});var t=a(85893),r=a(11151);const o={title:"Azure Hackathon Vending with Terraform",metaDescription:"Learn how to build and deploy a Hackathon environment with Azure, GitHub Actions, Entra ID, and Terraform.",date:new Date("2024-07-29T06:27:25.893Z"),tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"azure/hackathon-vending-project",keywords:["azure","hackathon","vending machine","iac","Terraform","Entra ID"],description:"Learn how to build and deploy a Hackathon environment with Azure, GitHub Actions, Entra ID, and Terraform."},s=void 0,i={permalink:"/azure/hackathon-vending-project",source:"@site/blog/2024-07-29-azure-hackathon-vending/index.mdx",title:"Azure Hackathon Vending with Terraform",description:"Learn how to build and deploy a Hackathon environment with Azure, GitHub Actions, Entra ID, and Terraform.",date:"2024-07-29T06:27:25.893Z",tags:[{label:"Azure",permalink:"/tags/azure"}],readingTime:13.975,hasTruncateMarker:!0,authors:[{name:"Luke Murray",title:"Author",url:"https://luke.geek.nz",imageURL:"https://luke.geek.nz/img/logo.png",key:"Luke"}],frontMatter:{title:"Azure Hackathon Vending with Terraform",metaDescription:"Learn how to build and deploy a Hackathon environment with Azure, GitHub Actions, Entra ID, and Terraform.",date:"2024-07-29T06:27:25.893Z",tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"azure/hackathon-vending-project",keywords:["azure","hackathon","vending machine","iac","Terraform","Entra ID"],description:"Learn how to build and deploy a Hackathon environment with Azure, GitHub Actions, Entra ID, and Terraform."},unlisted:!1,prevItem:{title:"Features and Benefits of Azure API Management",permalink:"/azure/apim-overview"},nextItem:{title:"Container Patching with Azure DevOps, Trivy and Copacetic",permalink:"/azure/automate-container-patching-with-trivy-copacetic-azure-devops"}},c={authorsImageUrls:[void 0]},h=[];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",img:"img",li:"li",mermaid:"mermaid",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"When working with Microsoft Azure, you may want an environment for learning, testing, or Hackathons. This post will cover some technical implementation considerations for creating a sandbox environment in Azure that could be used for your Hackathons using Terraform, Entra ID Access packages, and GitHub Actions."}),"\n","\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Microsoft Azure - Hackathon",src:a(6663).Z+"",width:"4000",height:"2250"})}),"\n",(0,t.jsx)(n.p,{children:"So let us look at a scenario:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:'"As a hackathon organizer, I want to build an Azure environment that supports various AI-driven solutions to automate and enhance operational processes, including customer feedback analysis, testing plan creation, and standard procedure refinement."'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Requirements",src:a(83229).Z+"",width:"4000",height:"2250"})}),"\n",(0,t.jsx)(n.p,{children:"We have a few Technical Requirements:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["It needs to support multiple ",(0,t.jsx)(n.em,{children:"(external)"})," users and teams from different organizations using Work and Personal accounts who work together."]}),"\n",(0,t.jsx)(n.li,{children:"Needs to support the creation of multiple Azure resources"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"And our limitations are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"One Azure subscription"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Let us look at how we can leverage Microsoft Azure technologies to implement this."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Azure environment",src:a(38592).Z+"",width:"4000",height:"2250"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/azure/cost-management-billing/manage/create-subscription?WT.mc_id=AZ-MVP-5004796",children:"Azure Subscription"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/azure/azure-resource-manager/management/overview?WT.mc_id=AZ-MVP-5004796#resource-groups",children:"Azure Resource Groups"})," ",(0,t.jsx)(n.em,{children:"(within Azure subscription)"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/entra/fundamentals/whatis?WT.mc_id=AZ-MVP-5004796",children:"Entra ID"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/entra/id-governance/entitlement-management-access-package-create?WT.mc_id=AZ-MVP-5004796",children:"Entra ID Identity Governance - Access Packages"}),". This requires a Entra ID P2 license."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For this article, there are some assumptions I will be making, such as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A Resource Group per Team is sufficient for the Hackathon."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Environment concepts",src:a(73448).Z+"",width:"4000",height:"2250"})}),"\n",(0,t.jsxs)(n.p,{children:["We will approach this as a ",(0,t.jsx)(n.a,{href:"https://luke.geek.nz/azure/microsoft-azure-sandbox-design-considerations/",children:"Lightly Managed Sandbox"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Sandbox Types",src:a(15226).Z+"",width:"4000",height:"2250"})}),"\n",(0,t.jsx)(n.p,{children:"And give External Identities access to an Azure subscription through Access Packages and a Group with a Contributor role assigned to the individual Resource Groups."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Identity &amp; Access",src:a(98802).Z+"",width:"4000",height:"2250"})}),"\n",(0,t.jsx)(n.p,{children:"To do this, we will leverage Access packages to invite external users into the Hackathon tenancy and assign them to a group with the Contributor role assigned to the Resource Group."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackthon - Access packages",src:a(82402).Z+"",width:"4000",height:"2250"})}),"\n",(0,t.jsxs)(n.p,{children:["By creating a Policy allowing external organizations to make requests, the Hackathon Organiser can invite external users to the Azure subscription and access internal ",(0,t.jsx)(n.em,{children:"(Hackathon)"})," resources."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Hackathon - Identity Access packages",src:a(12200).Z+"",width:"4000",height:"2250"}),"\n",(0,t.jsx)(n.img,{alt:"Hackathon - Identity Access packages",src:a(37779).Z+"",width:"4000",height:"2250"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Identity Access packages",src:a(48331).Z+"",width:"1901",height:"965"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["You may also need to consider ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/entra/external-id/cross-tenant-access-overview?WT.mc_id=AZ-MVP-5004796",children:"Inbound Cross-tenant Access"})," setting Trust configuration."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Cross tenant Access Settings",src:a(40368).Z+"",width:"4000",height:"2250"})}),"\n",(0,t.jsx)(n.p,{children:"So, let's look at some of the main Terraform code snippets that could be used to create the Azure resources for the Hackathon."}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"The identity being used to create these Terraform resources will need the following:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/azure/role-based-access-control/role-assignments-portal-subscription-admin?WT.mc_id=AZ-MVP-5004796",children:"Owner"})," of the Azure Subscription to create the Resource Groups and role assignments."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/entra/identity/role-based-access-control/permissions-reference?WT.mc_id=AZ-MVP-5004796#identity-governance-administrator",children:"Identity Governance Administrator"}),", to create the Access Packages and Catalog."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/entra/identity/role-based-access-control/permissions-reference?WT.mc_id=AZ-MVP-5004796#groups-administrator",children:"Groups Administrator"})," role to create and delete the Groups in the Entra ID tenant."]}),"\n"]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'locals {\n  # Read the content of the CSV file named "az_hackathon.csv" and store it in the local variable "csv_content."\n  csv_content = file("az_hackathon.csv")\n  # Decode the CSV content into a list of maps, each representing a row in the CSV file.\n  csv_data    = csvdecode(local.csv_content)\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This reads a CSV file containing the details of the Azure Resource Groups that need to be created for the Hackathon. I have used this base CSV file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csv",children:'Team,Location,Environment,Application,Notes\nTeam1,AustraliaEast,hackathon,AI,"AI Hackathon for luke.geek.nz."\nTeam2,canadaeast,hackathon,AI,"AI Hackathon for luke.geek.nz."\nTeam3,francecentral,hackathon,AI,"AI Hackathon for luke.geek.nz."\nTeam4,swedencentral,hackathon,AI,"AI Hackathon for luke.geek.nz."\nTeam5,uksouth,hackathon,AI,"AI Hackathon for luke.geek.nz."\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Using this and the ",(0,t.jsx)(n.a,{href:"https://registry.terraform.io/providers/hashicorp/azurerm/latest",children:"AzureRM"})," Terraform provider, we can create the Resource Groups and assign the Access Packages to them."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# Define an Azure Resource Group resource named "rg".\nresource "azurerm_resource_group" "rg" {\n  # Create one resource group for each entry in the csv_data list.\n  count    = length(local.csv_data)\n    # Set the name of the resource group using the Team, Environment, and Application attributes from the csv_data list.\n  name     = lower(format("%s-%s-%s-rg", local.csv_data[count.index].Team, local.csv_data[count.index].Environment, local.csv_data[count.index].Application))\n    # Set the location of the resource group using the Location attribute from the csv_data list.\n  location = local.csv_data[count.index].Location\n    # Set tags for the resource group using attributes from the csv_data list.\n  tags = {\n    Environment = lower(local.csv_data[count.index].Environment)\n    Team        = lower(local.csv_data[count.index].Team)\n    Application = lower(local.csv_data[count.index].Application)\n    Notes       = lower(local.csv_data[count.index].Notes)\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"You will create a Resource Group, such as below, for each team based on the CSV file:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Resource Group 1",src:a(65406).Z+"",width:"1762",height:"471"})}),"\n",(0,t.jsx)(n.p,{children:"Now we can create the Groups and assign the permissions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# Define an Azure AD Group resource named "ad_group".\nresource "azuread_group" "ad_group" {\n  # Create one Azure AD group for each entry in the csv_data list.\n  count            = length(local.csv_data)\n  # Set the display name of the Azure AD group using the Team, Environment, and Application attributes from the csv_data list.\n  display_name     = lower(format("%s-%s-%s-group", local.csv_data[count.index].Team, local.csv_data[count.index].Environment, local.csv_data[count.index].Application))\n  # Set the description of the Azure AD group using the Team, Environment, and Application attributes from the csv_data list.\n  description      = format("Group for %s environment of %s application managed by %s team.", title(local.csv_data[count.index].Environment), title(local.csv_data[count.index].Application), title(local.csv_data[count.index].Team))\n  # Disable mail for the Azure AD group.\n  mail_enabled     = false\n  # Enable security for the Azure AD group.\n  security_enabled = true\n}\n\n# Define an Azure Role Assignment resource named "role_assignment".\nresource "azurerm_role_assignment" "role_assignment" {\n  # Create one role assignment for each entry in the csv_data list.\n  count                = length(local.csv_data)\n  # Set the scope of the role assignment to the ID of the corresponding resource group.\n  scope                = azurerm_resource_group.rg[count.index].id\n  # Assign the "Owner" role to the principal.\n  role_definition_name = "Owner"\n  # Set the principal ID to the object ID of the corresponding Azure AD group.\n  principal_id         = azuread_group.ad_group[count.index].object_id\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Hackathon - Resource Group Access Control (IAM)",src:a(55614).Z+"",width:"1606",height:"744"}),"'"]}),"\n",(0,t.jsxs)(n.p,{children:["So now, we have created the Resource Groups and Entra ID groups and assigned Owner permissions to the Resource Groups for each Team in the CSV file; it is time to deploy a base resource - such as Azure OpenAI, which those hackathon teams can use, to get going! ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/azure/ai-services/openai/concepts/models?WT.mc_id=AZ-MVP-5004796",children:"Azure OpenAI models are deployed to various regions"})," and have token limits constrained to the region, so we need to consider how heavily these endpoints will be hit - which is why you may have noticed in the CSV, that the location of each Resource Group is different, so we want to use that to make sure that our Azure OpenAI resources are deployed in the same region as the Resource Group, to help balance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# This resource block defines an Azure Cognitive Account resource named "openai"\nresource "azurerm_cognitive_account" "openai" {\n  # The for_each argument is used to iterate over a map created from local.csv_data.\n  # Each entry in the map is identified by an index (idx) and its corresponding value (val).\n  for_each = { for idx, val in local.csv_data : idx => val }\n  # The name of the cognitive account is dynamically set using the "Team" attribute from each value in the map.\n  name = "openai-ca-${lower(each.value.Team)}-${lower(each.value.Location)}"\n  # The location of the cognitive account is set using the "Location" attribute from each value in the map.\n  location = each.value.Location\n  # The resource group name is dynamically set using the key from the map.\n  resource_group_name = azurerm_resource_group.rg[each.key].name\n  # The kind of cognitive account is set to "OpenAI."\n  kind = "OpenAI"\n  # The SKU (pricing tier) of the cognitive account is set to "S0".\n  sku_name = "S0"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"So we end up with something like this:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Azure OpenAI",src:a(73632).Z+"",width:"1382",height:"617"})}),"\n",(0,t.jsxs)(n.p,{children:["We may also need to consider the Azure ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/azure/azure-resource-manager/management/resource-providers-and-types?WT.mc_id=AZ-MVP-5004796",children:"Resource Providers"}),", as the Hackathon teams, won't have permissions to register these."]}),"\n",(0,t.jsx)(n.p,{children:"So we can create a map of the Resource Providers, and then iterate over them, to register them."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'variable "resource_providers" {\n  description = "Map of Azure resource providers to register"\n  default = {\n    "Microsoft.Maps"                    = {}\n    "Microsoft.OperationalInsights"     = {}\n    "Microsoft.EventGrid"               = {}\n    "Microsoft.EventHub"                = {}\n    "Microsoft.GuestConfiguration"      = {}\n    "Microsoft.HDInsight"               = {}\n    "Microsoft.KeyVault"                = {}\n    "Microsoft.ContainerService"        = {}\n    "Microsoft.DBforMySQL"              = {}\n    "Microsoft.DBforMariaDB"            = {}\n    "Microsoft.DBforMySQL"              = {}\n    "Microsoft.DBforPostgreSQL"         = {}\n    "Microsoft.DataFactory"             = {}\n    "Microsoft.HealthBot"               = {}\n    "Microsoft.HealthModel"             = {}\n    "Microsoft.HealthcareApis"          = {}\n    "Microsoft.MachineLearning"         = {}\n    "Microsoft.Orbital"                 = {}\n    "Microsoft.Sql"                     = {}\n    // Add the rest of your providers here\n  }\n}\n\nresource "azurerm_resource_provider_registration" "resourceproviders" {\n  for_each = var.resource_providers\n  name     = each.key\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now, we need to create our Entra ID Catalog and Access Packages and assign the Resource Groups to the Access package."}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/entra/id-governance/entitlement-management-access-package-create?WT.mc_id=AZ-MVP-5004796#create-request-policies",children:"request policies"})," themselves, I had issues deploying via Terraform, I suspect due to missing Graph permissions 'EntitlementManagement.ReadWrite.All' on the identity, but had some issues adding this, so did them manually, however, I have successfully deployed the policies in another environment successfully using the: ",(0,t.jsx)(n.a,{href:"https://registry.terraform.io/providers/hashicorp/azuread/latest/docs/resources/access_package_assignment_policy",children:"azuread_access_package_assignment_policy"})," terraform resource."]}),(0,t.jsx)(n.p,{children:"Make sure you add:\nrequests_accepted = true\nTo the requestors block, enable the policy, or the policy will be deployed as Disabled."})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'resource "azuread_access_package_catalog" "Sandbox" {\ndescription  = "Hackathon Sandboxes"\ndisplay_name = "Sandbox"\npublished    = true\n}\n\n# Define an Azure AD Access Package resource named "access_package"\nresource "azuread_access_package" "access_package" {\n# The count parameter determines how many instances of this resource to create based on the length of the csv_data list.\ncount = length(local.csv_data)\n# The display_name parameter sets the display name of the access package for each instance,\n# using the Team, Environment, and Application attributes from the csv_data list.\ndisplay_name = format("%s-%s-%s-access-package", local.csv_data[count.index].Team, local.csv_data[count.index].Environment, local.csv_data[count.index].Application)\n# The catalog_id parameter sets the ID of the access package catalog for each instance,\n# using the Sandbox catalog ID.\ncatalog_id = azuread_access_package_catalog.Sandbox.id\n# The description parameter sets the description of the access package for each instance,\n# using the Team, Environment, and Notes attributes from the csv_data list.\ndescription = "Access package for ${local.csv_data[count.index].Team}-${local.csv_data[count.index].Environment}-${local.csv_data[count.index].Notes}"\n}\n\n# Assign all groups we have created to our catalog\nresource "azuread_access_package_resource_catalog_association" "CloudSandbox_Groups" {\n# The count parameter determines how many instances of this resource to create based on the length of the csv_data list.\ncount = length(local.csv_data)\n# The catalog_id parameter sets the ID of the access package catalog for each instance using the Sandbox catalog ID.\ncatalog_id = azuread_access_package_catalog.Sandbox.id\n# The resource_origin_id parameter sets the ID of the Azure AD group for each instance using the index from the csv_data list.\nresource_origin_id = azuread_group.ad_group[count.index].id\n# The resource_origin_system parameter specifies the origin system of the resource, which is "AadGroup" in this case.\nresource_origin_system = "AadGroup"\n}\n\nresource "azuread_access_package_resource_package_association" "group_association" {\n# The count parameter determines how many instances of this resource to create based on the length of the csv_data list.\ncount = length(local.csv_data)\n# The access_package_id parameter sets the ID of the access package for each instance using the index from the csv_data list.\naccess_package_id = azuread_access_package.access_package[count.index].id\n# The catalog_resource_association_id parameter sets the ID of the catalog resource association for each instance using the index from the csv_data list.\ncatalog_resource_association_id = azuread_access_package_resource_catalog_association.CloudSandbox_Groups[count.index].id\n}\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - Entra ID Access Packages",src:a(33961).Z+"",width:"1855",height:"740"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - GitHub Actions",src:a(69303).Z+"",width:"4000",height:"2250"})}),"\n",(0,t.jsx)(n.p,{children:"Now we have our base Terraform, it is time to deploy this, and we can use GitHub Actions to do this by creating a GitHub Actions workflow file, such as below:"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[Push to main or PR to main] --\x3e B[Terraform Plan Job]\n    B --\x3e C[Checkout Repository]\n    C --\x3e D[Setup Terraform]\n    D --\x3e E[Terraform Init]\n    E --\x3e F[Terraform Format]\n    F --\x3e G[Terraform Plan]\n    G --\x3e H[Upload Terraform Plan]\n    H --\x3e I[Create String Output]\n    I --\x3e J[Publish Terraform Plan to Task Summary]\n    J --\x3e K[Push Terraform Output to PR]\n\n    A --\x3e L[Terraform Apply Job]\n    L --\x3e M[Checkout Repository]\n    M --\x3e N[Setup Terraform]\n    N --\x3e O[Terraform Init]\n    O --\x3e P[Download Terraform Plan]\n    P --\x3e Q[Terraform Apply]\n\n    subgraph Terraform Plan Job\n        B\n        C\n        D\n        E\n        F\n        G\n        H\n        I\n        J\n        K\n    end\n\n    subgraph Terraform Apply Job\n        L\n        M\n        N\n        O\n        P\n        Q\n    end\n\n    style B fill:#f9f,stroke:#333,stroke-width:4px\n    style L fill:#f9f,stroke:#333,stroke-width:4px"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'name: \'Terraform Plan/Apply\'\n\non:\n  push:\n    branches:\n    - main\n  pull_request:\n    branches:\n    - main\n\n#Special permissions required for OIDC authentication\npermissions:\n  id-token: write\n  contents: read\n  pull-requests: write\n\njobs:\n  terraform-plan:\n    name: \'Terraform Plan\'\n    runs-on: ubuntu-latest\n    environment: production\n\n    env:\n      #this is needed since we are running terraform with read-only permissions\n      ARM_SKIP_PROVIDER_REGISTRATION: true\n    outputs:\n      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}\n\n    steps:\n    # Checkout the repository to the GitHub Actions runner\n    - name: Checkout\n      uses: actions/checkout@v4\n\n    # Install the latest version of the Terraform CLI\n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v3\n      with:\n        terraform_wrapper: false\n\n    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.\n    - name: Terraform Init\n      run: terraform init\n      #These environment variables are used by the terraform azure provider to setup OIDD authenticate. \n      env:\n        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"\n        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"\n        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"\n      working-directory: ./iac\n\n    # Checks that all Terraform configuration files adhere to a canonical format\n    # Will fail the build if not\n    - name: Terraform Format\n      run: terraform fmt -check\n      working-directory: ./iac\n\n    # Generates an execution plan for Terraform\n    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.\n    - name: Terraform Plan\n      id: tf-plan\n      env:\n        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"\n        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"\n        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"\n      working-directory: ./iac\n      run: |\n        export exitcode=0\n        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?\n\n        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT\n        \n        if [ $exitcode -eq 1 ]; then\n          echo Terraform Plan Failed!\n          exit 1\n        else \n          exit 0\n        fi\n        \n    - name: Upload Terraform Plan\n      if: success() && steps.plan.outputs.exitcode != \'1\'\n      uses: actions/upload-artifact@v4\n      with:\n        name: tfplan\n        path: ./iac/tfplan # Ensure this path is correct\n        \n    # Create string output of Terraform Plan\n    - name: Create String Output\n      id: tf-plan-string\n      run: |\n        cd ./iac\n        TERRAFORM_PLAN=$(terraform show -no-color tfplan)\n        delimiter="$(openssl rand -hex 8)"\n        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT\n        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT\n        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT\n        echo "" >> $GITHUB_OUTPUT\n        echo \'```terraform\' >> $GITHUB_OUTPUT\n        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT\n        echo \'```\' >> $GITHUB_OUTPUT\n        echo "</details>" >> $GITHUB_OUTPUT\n        echo "${delimiter}" >> $GITHUB_OUTPUT\n        \n    # Publish Terraform Plan as task summary\n    - name: Publish Terraform Plan to Task Summary\n      env:\n        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}\n      run: |\n        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY\n      \n    # If this is a PR post the changes\n    - name: Push Terraform Output to PR\n      if: github.ref != \'refs/heads/main\'\n      uses: actions/github-script@v7\n      env:\n        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"\n      with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const body = `${process.env.SUMMARY}`;\n            github.rest.issues.createComment({\n                issue_number: context.issue.number,\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                body: body\n            })\n                \n  terraform-apply:\n    name: \'Terraform Apply\'\n    if: github.ref == \'refs/heads/main\' && needs.terraform-plan.outputs.tfplanExitCode == 2\n    runs-on: ubuntu-latest\n    environment: production\n    needs: [terraform-plan]\n    \n    steps:\n    # Checkout the repository to the GitHub Actions runner\n    - name: Checkout\n      uses: actions/checkout@v4\n\n    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token\n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v3\n\n    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.\n    - name: Terraform Init\n      run: terraform init\n      env:\n        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"\n        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"\n        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"\n      working-directory: ./iac\n\n    # Download saved plan from artifacts  \n    - name: Download Terraform Plan\n      uses: actions/download-artifact@v4\n      with:\n        name: tfplan\n        path: ./iac  # Specify the directory where the tfplan should be saved\n    \n    - name: Terraform Apply\n      run: terraform apply -auto-approve tfplan\n      working-directory: ./iac\n      env:\n        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"\n        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"\n        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"\n'})}),"\n",(0,t.jsx)(n.p,{children:"This GitHub Actions workflow will connect to Azure, using OIDC from a User Managed Identity, deploy the Terraform plan, and apply the changes to the Azure subscription."}),"\n",(0,t.jsx)(n.p,{children:"The Terraform backend settings look like this, with the state file stored in an Azure Storage account called tfstatehackathon in a container called tfstate in the rg-terraform-hackathon-prod Resource Group. These resources were manually deployed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'  backend "azurerm" {\n    resource_group_name  = "rg-terraform-hackathon-prod"\n    storage_account_name = "tfstatehackathon"\n    container_name       = "tfstate"\n    key                  = "terraform.tfstate"\n    use_oidc             = true\n  }\n\n  provider "azuread" {\n  use_oidc = true\n}\n\n# Configure the Azure Provider with the features block\nprovider "azurerm" {\n\n  skip_provider_registration = true\n  use_oidc                   = true\n  features {\n    key_vault {\n      purge_soft_delete_on_destroy    = true\n      recover_soft_deleted_key_vaults = true\n    }\n  }\n}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"In the GitHub repository, we have an Environment named production, and inside this is our:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Variable"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"AZURE_CLIENT_ID"}),(0,t.jsx)(n.td,{children:"The client ID of the Entra ID User assigned managed identity used for authentication"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"AZURE_SUBSCRIPTION_ID"}),(0,t.jsx)(n.td,{children:"The ID of the Azure subscription"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"AZURE_TENANT_ID"}),(0,t.jsx)(n.td,{children:"The ID of the Entra ID tenant"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hackathon - GitHub Actions",src:a(98889).Z+"",width:"1282",height:"857"})}),"\n",(0,t.jsxs)(n.p,{children:["The full code for this can be found in the ",(0,t.jsx)(n.a,{href:"https://github.com/lukemurraynz/HackathonRGAzureEnvironment",children:"lukemurraynz/HackathonRGAzureEnvironment"}),". If you have any suggestions or improvements, feel free to open a PR ",(0,t.jsx)(n.em,{children:"(Pull Request)"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Finally, once the Hackathon is over, you can use Terraform to revert the configuration and clean up the Azure subscription; once the users are removed from the Hackathon Access packages, their Guest accounts can be Disabled; you can also configure the policy to remove them from your tenancy automatically."}),"\n",(0,t.jsxs)(n.p,{children:["Your Hackathon students should now be able to log in to the ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/entra/id-governance/entitlement-management-request-access?WT.mc_id=AZ-MVP-5004796#sign-in-to-the-my-access-portal",children:"My Access Portal"}),", request access, to a Team, and once approved ",(0,t.jsx)(n.em,{children:"(based on the policy you specified in the Access package)"})," will be able to navigate to the Azure Portal for your tenancy '",(0,t.jsx)(n.a,{href:"https://portal.azure.com/YOURTENANTNAMEORID",children:"https://portal.azure.com/YOURTENANTNAMEORID"}),"' and be able to create resources in the Azure Resource Group, and as Teams expand, you simply have to edit the CSV file and push the change."]})]})}function l(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},98889:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_GitHub_ProductionEnvironment-a65b65a571eb7da24df9314cc6819fbd.png"},73448:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_environmentconcepts-6e9d88470c62e51b3b951e5713fe6bfd.PNG"},38592:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_environmenttech-564e79187f0a99533670876d61a40f67.PNG"},69303:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_githubactions-af337675c2e1c65569af8430ff90e44b.PNG"},98802:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_identityaccess-7705a603b81cf5c9fb64db289058179d.PNG"},82402:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_identityaccesspackages-111a83f65e10bb6219d52889d8f38830.PNG"},33961:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_identityaccesspackagesazportal-68a7720d71b613d8f88329c815488890.png"},12200:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_identityaccesspackagespolicy-d698483f2d38445027259d76a20a6689.PNG"},37779:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_identityaccesspackagespolicy1-8839a3331df4715d577fad134e127c94.PNG"},40368:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_identityaccesstrustsettings-9866c39d287f36c72ed8e9732f3184e6.PNG"},6663:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_overview-68a98616da8e81ab9fe921e6f2fc0e3a.png"},83229:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_requirements-1d6c7bbc58eddc063d7e0b34b9c5720c.PNG"},73632:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_resources_AzureOpenAI-4d1f6aa92f81b86364326fd118f9ce39.png"},15226:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_sandboxtypes-b9154dc64e946394357ff70eca29f46d.PNG"},65406:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_team1_resourcegroupbeforeOpenAI-ce22af101cb5df3abb2eb58fd6747a4c.png"},55614:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathon_team1_resourcegroupiam-6593adbc494da6046c4f07ec33ba0a69.png"},48331:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/hackathonaccesspackage_signup-19dd9142ba0850219162553278c63dd3.gif"},11151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>s});var t=a(67294);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);