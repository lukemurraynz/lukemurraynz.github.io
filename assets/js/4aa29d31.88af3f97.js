"use strict";(self.webpackChunklukemurraynz=self.webpackChunklukemurraynz||[]).push([[72040],{82708:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var t=n(36731),o=n(74848),a=n(28453);const i={title:"PowerShell based Terraform Bootstrap Script",metaDescription:"Create a PowerShell script to bootstrap Terraform, handle installation, create project directories, and automate deployments across Windows, Mac, and Linux.",date:new Date("2025-01-13T07:44:51.071Z"),tags:["Azure"],categories:["Azure"],authors:["Luke"],slug:"azure/powershell-terraform-bootstrap",keywords:["PowerShell","Terraform","Infrastructure as Code","Automation","DevOps","Bootstrap","Cross-platform","Infrastructure automation","Configuration management","Script development"],description:"Create a PowerShell script to bootstrap Terraform, handle installation, create project directories, and automate deployments across Windows, Mac, and Linux."},s=void 0,l={authorsImageUrls:[void 0]},c=[{value:"\ud83d\udcdc Script Overview",id:"-script-overview",level:2},{value:"\ud83d\udccb Prerequisites",id:"-prerequisites",level:2},{value:"\ud83c\udfaf Usage Examples",id:"-usage-examples",level:2},{value:"\ud83d\udcbb PowerShell Script",id:"-powershell-script",level:2},{value:"\ud83d\udcc2 Example Terraform Files",id:"-example-terraform-files",level:2}];function p(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.p,{children:"Today, we will implement a Terraform bootstrap script that will install Terraform and create directories where we can place our Terraform project, which will then run a plan against and deploy. This script will be written in PowerShell to bootstrap a new Terraform project."}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsx)(r.p,{children:'"Bootstrapping usually refers to a self-starting process that is supposed to continue or grow without external input. Many analytical techniques are often called bootstrap methods in reference to their self-starting or self-supporting implementation" ~ Wikipedia.'}),"\n"]}),"\n","\n",(0,o.jsx)(r.h2,{id:"-script-overview",children:"\ud83d\udcdc Script Overview"}),"\n",(0,o.jsxs)(r.p,{children:["Inspired by the ",(0,o.jsx)(r.a,{href:"https://github.com/Azure/ALZ-PowerShell-Module",children:"ALZ Accelerator"})," bootstrap script, this script will:"]}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsx)(r.li,{children:"Install-Terraform"}),"\n"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Downloads and installs Terraform if not present"}),"\n",(0,o.jsx)(r.li,{children:"Handles version management"}),"\n",(0,o.jsx)(r.li,{children:"Supports Windows/Mac/Linux detection"}),"\n",(0,o.jsx)(r.li,{children:"Adds Terraform to PATH"}),"\n"]}),"\n",(0,o.jsxs)(r.ol,{start:"2",children:["\n",(0,o.jsx)(r.li,{children:"Creates required directories (config and output)"}),"\n"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Copies *.tf and *.tfvars files from config to output"}),"\n",(0,o.jsx)(r.li,{children:"Validate file contents and paths"}),"\n"]}),"\n",(0,o.jsxs)(r.ol,{start:"3",children:["\n",(0,o.jsx)(r.li,{children:"Invoke-Terraform"}),"\n"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Initializes Terraform"}),"\n",(0,o.jsx)(r.li,{children:"Creates execution plan"}),"\n",(0,o.jsx)(r.li,{children:"Handles apply/destroy with optional auto-approve"}),"\n",(0,o.jsx)(r.li,{children:"Manages working directory context"}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"And I've tested it on my Windows 11 machine and a Linux Codespace. In my examples, I am using it to run some base Terraform to deploy a new Resource Group and Storage Account in the New Zealand North Azure region."}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.img,{alt:"Run Terraform Bootstrap",src:n(3208).A+"",width:"1276",height:"1014"})}),"\n",(0,o.jsxs)(r.admonition,{type:"tip",children:[(0,o.jsxs)(r.p,{children:["You could also look at turning it into an executable using something like ",(0,o.jsx)(r.a,{href:"https://github.com/MScholtes/PS2EXE",children:"PS2EXE"}),", and then you can run it like any other executable, as below:"]}),(0,o.jsx)(r.p,{children:(0,o.jsx)(r.img,{alt:"Run Terraform Bootstrap Executable",src:n(40025).A+"",width:"1354",height:"749"})})]}),"\n",(0,o.jsx)(r.h2,{id:"-prerequisites",children:"\ud83d\udccb Prerequisites"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"https://learn.microsoft.com/powershell/scripting/install/installing-powershell?view=powershell-7.4&WT.mc_id=AZ-MVP-5004796",children:"PowerShell"})," 5.1 or PowerShell Core 6.0+"]}),"\n",(0,o.jsxs)(r.li,{children:["Internet connectivity for downloading ",(0,o.jsx)(r.a,{href:"https://www.terraform.io/",children:"Terraform"})]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"https://learn.microsoft.com/cli/azure/install-azure-cli?WT.mc_id=AZ-MVP-5004796",children:"Azure CLI"})," is installed and logged in (",(0,o.jsx)(r.code,{children:"az login"}),"). It is only required if deploying to ",(0,o.jsx)(r.a,{href:"https://learn.microsoft.com/azure/developer/terraform/overview?WT.mc_id=AZ-MVP-5004796",children:"Microsoft Azure"}),"."]}),"\n",(0,o.jsx)(r.li,{children:"Write permissions to the directory where you'll run the script"}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"-usage-examples",children:"\ud83c\udfaf Usage Examples"}),"\n",(0,o.jsx)(r.p,{children:"Basic usage with default parameters:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-powershell",children:".\\Terraform-Bootstrap.ps1\n"})}),"\n",(0,o.jsx)(r.p,{children:"Custom paths and auto-approved apply:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-powershell",children:'.\\Terraform-Bootstrap.ps1 -terraformPath "C:\\terraform" -configPath "C:\\tf-configs" -outputPath "C:\\tf-output" -autoApprove\n'})}),"\n",(0,o.jsx)(r.p,{children:"Using a specific Terraform version:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-powershell",children:'.\\Terraform-Bootstrap.ps1 -terraformPath "C:\\terraform" -configPath "C:\\tf-configs" -outputPath "C:\\tf-output"\n'})}),"\n",(0,o.jsx)(r.h2,{id:"-powershell-script",children:"\ud83d\udcbb PowerShell Script"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-powershell",metastring:'title="Terraform-Bootstrap.ps1"',children:'<#\n    .SYNOPSIS\n    Bootstraps Terraform environment and runs specified Terraform commands.\n\n    .DESCRIPTION\n    This script ensures Terraform is installed, sets up the Terraform workspace, and runs specified Terraform commands.\n    It supports downloading the latest version of Terraform, creating necessary directories, and copying configuration files.\n    The script is intended to be used to bootstrap Terraform environments for testing and development purposes and once-off deployments of any code in the Config directory.\n\n    .NOTES\n    Version:        1.0\n    Author:         luke.geek.nz\n    Creation Date:  10/01/25\n    Purpose/Change: \n    14/05/17 - Initial script creation\n\n    .PARAMETER terraformPath\n    The path where Terraform will be installed.\n\n    .PARAMETER terraformVersion\n    The version of Terraform to install. Defaults to "latest".\n\n    .PARAMETER configPath\n    The path to the directory containing Terraform configuration files.\n\n    .PARAMETER outputPath\n    The path to the directory where Terraform will be executed.\n\n    .PARAMETER autoApprove\n    Automatically approve Terraform apply and destroy actions.\n\n    .EXAMPLE\n    .\\Terraform-Bootstrap.ps1 -terraformPath ".\\terraform" -terraformVersion "latest" -configPath ".\\config" -outputPath ".\\output"\n#>\n\n[CmdletBinding()]\nparam (\n    [Parameter(Mandatory = $false)]\n    [string]$terraformPath = ".\\terraform",\n    \n    [Parameter(Mandatory = $false)]\n    [string]$terraformVersion = "latest",\n    \n    [Parameter(Mandatory = $false)]\n    [string]$configPath = ".\\config",\n    \n    [Parameter(Mandatory = $false)]\n    [string]$outputPath = ".\\output",\n    \n    [Parameter(Mandatory = $false)]\n    [switch]$autoApprove\n)\n\n# Function to ensure Terraform is installed\nfunction Install-Terraform {\n    param (\n        [string]$version,\n        [string]$path\n    )\n    \n    # Get latest version if not specified\n    if ($version -eq "latest") {\n        $versionResponse = Invoke-WebRequest -Uri "https://checkpoint-api.hashicorp.com/v1/check/terraform"\n        $version = ($versionResponse).Content | ConvertFrom-Json | Select-Object -ExpandProperty current_version\n    }\n\n    # Check if Terraform is already installed\n    $tfCommand = Get-Command -Name terraform -ErrorAction SilentlyContinue\n    if ($tfCommand) {\n        Write-Verbose "Terraform already installed at $($tfCommand.Path)"\n        return\n    }\n\n    # Create tools directory\n    if (!(Test-Path $path)) {\n        New-Item -ItemType Directory -Path $path | Out-Null\n    }\n\n    # Download and extract Terraform\n    $os = if ($IsWindows) { "windows" } else { if ($IsMacOS) { "darwin" } else { "linux" } }\n    $arch = if ([System.Environment]::Is64BitOperatingSystem) { "amd64" } else { "386" }\n    \n    $url = "https://releases.hashicorp.com/terraform/$($version)/terraform_$($version)_${os}_${arch}.zip"\n    $zipFile = Join-Path $path "terraform.zip"\n    $extractPath = Join-Path $path "terraform_$version"\n\n    Write-Verbose "Downloading Terraform from $url"\n    Invoke-WebRequest -Uri $url -OutFile $zipFile\n    \n    Write-Verbose "Extracting Terraform to $extractPath"\n    Expand-Archive -Path $zipFile -DestinationPath $extractPath -Force\n    Remove-Item $zipFile\n\n    # Add to PATH\n    $env:PATH = "$extractPath;$env:PATH"\n}\n\n# Function to run Terraform commands\nfunction Invoke-Terraform {\n    param (\n        [string]$workingDirectory,\n        [string]$command,\n        [switch]$autoApprove\n    )\n\n    Push-Location $workingDirectory\n    try {\n        # Initialize\n        Write-Host "Initializing Terraform..." -ForegroundColor Green\n        terraform init\n\n        # Run specified command\n        Write-Host "Running terraform $command..." -ForegroundColor Green\n        if ($command -eq "apply" -or $command -eq "destroy") {\n            terraform plan -out=tfplan\n            \n            if (!$autoApprove) {\n                $confirmation = Read-Host "Do you want to proceed with terraform $command? (y/n)"\n                if ($confirmation -ne \'y\') {\n                    Write-Host "Operation cancelled" -ForegroundColor Yellow\n                    return\n                }\n            }\n            \n            if ($command -eq "apply") {\n                terraform apply -auto-approve tfplan\n            }\n            else {\n                terraform destroy -auto-approve\n            }\n        }\n        else {\n            terraform $command\n        }\n    }\n    finally {\n        Pop-Location\n    }\n}\n\n# Main script\ntry {\n    # Create required directories\n    if (!(Test-Path $configPath)) {\n        New-Item -ItemType Directory -Path $configPath -Force | Out-Null\n        Write-Host "Config directory created at $configPath. Please place Terraform files into this directory and press any key to continue..." -ForegroundColor Yellow\n        Read-Host\n    }\n    if (!(Test-Path $outputPath)) {\n        New-Item -ItemType Directory -Path $outputPath -Force | Out-Null\n    }\n\n    # Install Terraform\n    Write-Host "Ensuring Terraform is installed..." -ForegroundColor Green\n    Install-Terraform -version $terraformVersion -path $terraformPath\n\n    # Copy Terraform files from config to output directory\n    Write-Host "Setting up Terraform workspace..." -ForegroundColor Green\n    \n    # Convert to absolute paths\n    $configPathFull = Resolve-Path $configPath -ErrorAction Stop\n    $outputPathFull = Resolve-Path $outputPath -ErrorAction Stop\n    \n    Write-Verbose "Config Path: $configPathFull"\n    Write-Verbose "Output Path: $outputPathFull"\n    \n    $configFiles = Get-ChildItem -Path $configPathFull -Recurse -File -Filter "*.tf" -ErrorAction Stop\n    $varFiles = Get-ChildItem -Path $configPathFull -Recurse -File -Filter "*.tfvars" -ErrorAction Stop\n    \n    Write-Verbose "Found $($configFiles.Count) .tf files"\n    \n    foreach ($file in $configFiles) {\n        Write-Verbose "Processing file: $($file.FullName)"\n        \n        # Verify source file\n        if (!(Test-Path $file.FullName)) {\n            Write-Error "Source file not found: $($file.FullName)"\n            continue\n        }\n        \n        # Check file content\n        $content = Get-Content $file.FullName -Raw\n        if ([string]::IsNullOrWhiteSpace($content)) {\n            Write-Warning "File is empty: $($file.FullName)"\n            continue\n        }\n        \n        Write-Host "Copying $($file.Name) to $outputPathFull" -ForegroundColor Green\n        Copy-Item -Path $file.FullName -Destination $outputPathFull -Force\n        \n        # Verify copy succeeded\n        $destFile = Join-Path $outputPathFull $file.Name\n        if (!(Test-Path $destFile)) {\n            Write-Error "Failed to copy file to: $destFile"\n        }\n    }\n    \n    foreach ($file in $varFiles) {\n        Write-Verbose "Processing var file: $($file.FullName)"\n        Write-Host "Copying $($file.Name) to $outputPathFull" -ForegroundColor Green\n        Copy-Item -Path $file.FullName -Destination $outputPathFull -Force\n    }\n\n    \n    # Run Terraform\n    Write-Host "Running Terraform..." -ForegroundColor Green\n    Invoke-Terraform -workingDirectory $outputPath -command "apply" -autoApprove:$autoApprove\n\n}\ncatch {\n    Write-Error "Error occurred: $_"\n    exit 1\n}\n'})}),"\n",(0,o.jsxs)(r.p,{children:["This script can also be found on GitHub ",(0,o.jsx)(r.a,{href:"https://github.com/lukemurraynz/PowerOfTheShell/blob/master/Other/Terraform-Bootstrap.ps1",children:"here"}),", if you wanted to fork, or open up a Pull Request with changes."]}),"\n",(0,o.jsxs)(r.p,{children:["Hopefully this is useful for you, having a script like this means I can quickly deploy resources that are coded in Terraform ",(0,o.jsx)(r.em,{children:"(HCL)"}),"."]}),"\n",(0,o.jsx)(r.h2,{id:"-example-terraform-files",children:"\ud83d\udcc2 Example Terraform Files"}),"\n",(0,o.jsx)(r.p,{children:"For those interested, here is the base Terraform code I am using in my example:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-hcl",metastring:'title="config/main.tf"',children:'resource "azurerm_resource_group" "example" {\n  name     = "example-stgaccount-rg"\n  location = "New Zealand North"\n}\n\nresource "azurerm_storage_account" "example" {\n  name                     = "stgacctfboot1"\n  resource_group_name      = azurerm_resource_group.example.name\n  location                 = azurerm_resource_group.example.location\n  account_tier             = "Standard"\n  account_replication_type = "LRS"\n\n  tags = {\n    environment = "staging"\n  }\n}\n'})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-hcl",metastring:'title="config/providers.tf"',children:'terraform {\n  required_providers {\n    azurerm = {\n      source = "hashicorp/azurerm"\n      version = "4.15.0"\n    }\n  }\n}\n\nprovider "azurerm" {\n  subscription_id = "9dc6cc8c-5b10-403b-9a2f-5192497ca1ed"\n\n  features {}\n\n}\n'})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},3208:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/RunTerraformBootstrap-57814cc7df3c255170503607d3efea0f.gif"},40025:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/TerraformBootstrapExecutable-118418eb84a2c4e5b59ac51750d41789.gif"},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>s});var t=n(96540);const o={},a=t.createContext(o);function i(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:r},e.children)}},36731:e=>{e.exports=JSON.parse('{"permalink":"/azure/powershell-terraform-bootstrap","source":"@site/blog/2025-01-13-terraformpwshbootstrap/index.mdx","title":"PowerShell based Terraform Bootstrap Script","description":"Create a PowerShell script to bootstrap Terraform, handle installation, create project directories, and automate deployments across Windows, Mac, and Linux.","date":"2025-01-13T07:44:51.071Z","tags":[{"inline":true,"label":"Azure","permalink":"/tags/azure"}],"readingTime":6.02,"hasTruncateMarker":true,"authors":[{"name":"Luke Murray","title":"Author","url":"https://luke.geek.nz","imageURL":"https://luke.geek.nz/img/logo.png","key":"Luke","page":null}],"frontMatter":{"title":"PowerShell based Terraform Bootstrap Script","metaDescription":"Create a PowerShell script to bootstrap Terraform, handle installation, create project directories, and automate deployments across Windows, Mac, and Linux.","date":"2025-01-13T07:44:51.071Z","tags":["Azure"],"categories":["Azure"],"authors":["Luke"],"slug":"azure/powershell-terraform-bootstrap","keywords":["PowerShell","Terraform","Infrastructure as Code","Automation","DevOps","Bootstrap","Cross-platform","Infrastructure automation","Configuration management","Script development"],"description":"Create a PowerShell script to bootstrap Terraform, handle installation, create project directories, and automate deployments across Windows, Mac, and Linux."},"unlisted":false,"prevItem":{"title":"Managing Environment Variables in Azure Static Web Apps with Azure Developer CLI","permalink":"/azure/staticwebapp-azd-environment-variables"},"nextItem":{"title":"Product Development lifecycle","permalink":"/misc/product-development-lifecycle"}}')}}]);